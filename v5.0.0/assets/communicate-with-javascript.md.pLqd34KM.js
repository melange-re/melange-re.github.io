import{_ as a,c as i,o as e,V as t}from"./chunks/framework.LM2Gdl7S.js";const u=JSON.parse('{"title":"Communicate with JavaScript","description":"","frontmatter":{},"headers":[],"relativePath":"communicate-with-javascript.md","filePath":"communicate-with-javascript.md"}'),s={name:"communicate-with-javascript.md"},n=t('<h1 id="communicate-with-javascript" tabindex="-1">Communicate with JavaScript <a class="header-anchor" href="#communicate-with-javascript" aria-label="Permalink to &quot;Communicate with JavaScript&quot;">â€‹</a></h1><p>Melange interoperates very well with JavaScript, and provides a wide array of features to create <em>bindings</em> to JavaScript code. A binding is a piece of code that references a JavaScript object or value and makes it available for use in Melange code. A very basic example of a binding is:</p><div class="language-ocaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ocaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> confirm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;window.confirm&quot;</span></span></code></pre></div><div class="language-reasonml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reasonml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> confirm</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> &quot;window.confirm&quot;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">;</span></span></code></pre></div><p>The above code binds JavaScript&#39;s <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm" target="_blank" rel="noreferrer">window.confirm</a> function to a Melange function named <code>confirm</code>. Note how the binding includes type annotations so that there&#39;s no ambiguity about the types of the arguments and return value.</p><hr><p>In this section:</p><ul><li><a href="./language-concepts.html">Language concepts</a>: Learn about the language features that make bindings possible</li><li><a href="./data-types-and-runtime-rep.html">Data types and runtime representations</a>: See how Melange types map to JavaScript runtime types</li><li><a href="./attributes-and-extension-nodes.html">Melange attributes and extension nodes</a>: A reference of all the built-in attributes and extension nodes that can be used to create bindings</li><li><a href="./working-with-js-objects-and-values.html">Working with JavaScript objects and values</a>: A rundown of all the common scenarios when binding to JavaScript objects and values (including functions)</li><li><a href="./advanced-js-interop.html">Advanced JavaScript interoperability</a>: Advanced topics such as code generation using <code>@deriving</code></li><li><a href="./bindings-cookbook.html">Bindings cookbook</a>: A collection of recipes that show JavaScript snippets and the equivalent code in Melange</li></ul>',8),o=[n];function r(l,c,h,p,d,k){return e(),i("div",null,o)}const m=a(s,[["render",r]]);export{u as __pageData,m as default};
