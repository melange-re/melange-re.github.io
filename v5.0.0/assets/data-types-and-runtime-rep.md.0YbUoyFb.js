import{_ as s,c as a,o as i,V as e}from"./chunks/framework.LM2Gdl7S.js";const y=JSON.parse('{"title":"Data types and runtime representation","description":"","frontmatter":{},"headers":[],"relativePath":"data-types-and-runtime-rep.md","filePath":"data-types-and-runtime-rep.md"}'),t={name:"data-types-and-runtime-rep.md"},n=e(`<h1 id="data-types-and-runtime-representation" tabindex="-1">Data types and runtime representation <a class="header-anchor" href="#data-types-and-runtime-representation" aria-label="Permalink to &quot;Data types and runtime representation&quot;">â€‹</a></h1><p>This is how each Melange type is converted into JavaScript values:</p><table><thead><tr><th>Melange</th><th>JavaScript</th></tr></thead><tbody><tr><td>int</td><td>number</td></tr><tr><td>nativeint</td><td>number</td></tr><tr><td>int32</td><td>number</td></tr><tr><td>float</td><td>number</td></tr><tr><td>string</td><td>string</td></tr><tr><td>array</td><td>array</td></tr><tr><td>tuple <code>(3, 4)</code></td><td>array <code>[3, 4]</code></td></tr><tr><td>bool</td><td>boolean</td></tr><tr><td><a class="text-ocaml" target="_self" href="./api/ml/melange/Js/Nullable">Js.Nullable.t</a><a class="text-reasonml" target="_self" href="./api/re/melange/Js/Nullable">Js.Nullable.t</a></td><td><code>null</code> / <code>undefined</code></td></tr><tr><td><a class="text-ocaml" target="_self" href="./api/ml/melange/Js/Re">Js.Re.t</a><a class="text-reasonml" target="_self" href="./api/re/melange/Js/Re">Js.Re.t</a></td><td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp" target="_blank" rel="noreferrer"><code>RegExp</code></a></td></tr><tr><td>Option.t <code>None</code></td><td><code>undefined</code></td></tr><tr><td>Option.t <code class="text-ocaml">Some( Some .. Some (None))</code><code class="text-reasonml">Some(Some( .. Some(None)))</code></td><td>internal representation</td></tr><tr><td>Option.t <code class="text-ocaml">Some 2</code><code class="text-reasonml">Some(2)</code></td><td><code>2</code></td></tr><tr><td>record <code class="text-ocaml">{x = 1; y = 2}</code><code class="text-reasonml">{x: 1; y: 2}</code></td><td>object <code>{x: 1, y: 2}</code></td></tr><tr><td>int64</td><td>array of 2 elements <code>[high, low]</code> high is signed, low unsigned</td></tr><tr><td>char</td><td><code>&#39;a&#39;</code> -&gt; <code>97</code> (ascii code)</td></tr><tr><td>bytes</td><td>number array</td></tr><tr><td>list <code>[]</code></td><td><code>0</code></td></tr><tr><td>list <code class="text-ocaml">[ x; y ]</code><code class="text-reasonml">[x, y]</code></td><td><code>{ hd: x, tl: { hd: y, tl: 0 } }</code></td></tr><tr><td>variant</td><td>See below</td></tr><tr><td>polymorphic variant</td><td>See below</td></tr></tbody></table><p>Variants with a single non-nullary constructor:</p><div class="language-ocaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ocaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tree </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Leaf</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Node</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> of</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tree </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tree</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">(* Leaf -&gt; 0 *)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">(* Node(7, Leaf, Leaf) -&gt; { _0: 7, _1: 0, _2: 0 } *)</span></span></code></pre></div><div class="language-reasonml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reasonml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tree</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">  |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Leaf</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">  |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> tree</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> tree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Leaf -&gt; 0 */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Node(7, Leaf, Leaf) -&gt; { _0: 7, _1: 0, _2: 0 } */</span></span></code></pre></div><p>Variants with more than one non-nullary constructor:</p><div class="language-ocaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ocaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> of</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> of</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> int</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">(* A(&quot;foo&quot;) -&gt; { TAG: 0, _0: &quot;Foo&quot; } *)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">(* B(2) -&gt; { TAG: 1, _0: 2 } *)</span></span></code></pre></div><div class="language-reasonml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reasonml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">  |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">  |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* A(&quot;foo&quot;) -&gt; { TAG: 0, _0: &quot;Foo&quot; } */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* B(2) -&gt; { TAG: 1, _0: 2 } */</span></span></code></pre></div><p>Polymorphic variants:</p><div class="language-ocaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ocaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> u</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \`Foo</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> (* &quot;Foo&quot; *)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \`Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">(* { NAME: &quot;Foo&quot;, VAL: &quot;2&quot; } *)</span></span></code></pre></div><div class="language-reasonml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reasonml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> u</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> \`</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Foo</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* &quot;Foo&quot; */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> \`</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* { NAME: &quot;Foo&quot;, VAL: &quot;2&quot; } */</span></span></code></pre></div><p>Letâ€™s see now some of these types in detail. We will first describe the <a href="#shared-types">shared types</a>, which have a transparent representation as JavaScript values, and then go through the <a href="#non-shared-data-types">non-shared types</a>, that have more complex runtime representations.</p><blockquote><p><strong><em>NOTE:</em></strong> Relying on the non-shared data types runtime representations by reading or writing them manually from JavaScript code that communicates with Melange code might lead to runtime errors, as these representations might change in the future.</p></blockquote><h2 id="shared-types" tabindex="-1">Shared types <a class="header-anchor" href="#shared-types" aria-label="Permalink to &quot;Shared types&quot;">â€‹</a></h2><p>The following are types that can be shared between Melange and JavaScript almost &quot;as is&quot;. Specific caveats are mentioned on the sections where they apply.</p><h3 id="strings" tabindex="-1">Strings <a class="header-anchor" href="#strings" aria-label="Permalink to &quot;Strings&quot;">â€‹</a></h3><p>JavaScript strings are immutable sequences of UTF-16 encoded Unicode text. OCaml strings are immutable sequences of bytes and nowadays assumed to be UTF-8 encoded text when interpreted as textual content. This is problematic when interacting with JavaScript code, because if one tries to use some unicode characters, like:</p><div class="language-ocaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ocaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Js</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">log </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ä½ å¥½&quot;</span></span></code></pre></div><div class="language-reasonml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reasonml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Js</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">log(</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">&quot;ä½ å¥½&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">;</span></span></code></pre></div><p>It will lead to some cryptic console output. To rectify this, Melange allows to define <a href="https://v2.ocaml.org/manual/lex.html#sss:stringliterals" target="_blank" rel="noreferrer">quoted string literals</a> using the <code>js</code> identifier, for example:</p><div class="language-ocaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ocaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Js</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">log </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{js|ä½ å¥½ï¼Œ</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ä¸–ç•Œ|js}</span></span></code></pre></div><div class="language-reasonml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reasonml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Js</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">log(</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">js</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">ä½ å¥½ï¼Œ</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">ä¸–ç•Œ</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">js</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">;</span></span></code></pre></div><p>For convenience, Melange exposes another special quoted string identifier: <code>j</code>. It is similar to JavaScriptâ€™ string interpolation, but for variables only (not arbitrary expressions):</p><div class="language-ocaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ocaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> world</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {j|ä¸–ç•Œ|j}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> helloWorld</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {j|ä½ å¥½ï¼Œ$world|j}</span></span></code></pre></div><div class="language-reasonml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reasonml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> world</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">j</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">ä¸–ç•Œ</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">j</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">}</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> helloWorld</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">j</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">ä½ å¥½ï¼Œ$world</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">j</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">}</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">;</span></span></code></pre></div><p>You can surround the interpolation variable in parentheses too: <code>{j|ä½  å¥½ï¼Œ$(world)|j}</code>.</p><p>To work with strings, the Melange standard library provides some utilities in the <a class="text-ocaml" target="_self" href="./api/ml/melange/Stdlib/String"><code>Stdlib.String</code> module</a><a class="text-reasonml" target="_self" href="./api/re/melange/Stdlib/String"><code>Stdlib.String</code> module</a>. The bindings to the native JavaScript functions to work with strings are in the <a class="text-ocaml" target="_self" href="./api/ml/melange/Js/String"><code>Js.String</code> module</a><a class="text-reasonml" target="_self" href="./api/re/melange/Js/String"><code>Js.String</code> module</a>.</p><h3 id="floating-point-numbers" tabindex="-1">Floating-point numbers <a class="header-anchor" href="#floating-point-numbers" aria-label="Permalink to &quot;Floating-point numbers&quot;">â€‹</a></h3><p>OCaml floats are <a href="https://en.wikipedia.org/wiki/Double-precision_floating-point_format#IEEE_754_double-precision_binary_floating-point_format:_binary64" target="_blank" rel="noreferrer">IEEE 754</a> with a 53-bit mantissa and exponents from -1022 to 1023. This happens to be the same encoding as <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_encoding" target="_blank" rel="noreferrer">JavaScript numbers</a>, so values of these types can be used transparently between Melange code and JavaScript code. The Melange standard library provides a <a class="text-ocaml" target="_self" href="./api/ml/melange/Stdlib/Float"><code>Stdlib.Float</code> module</a><a class="text-reasonml" target="_self" href="./api/re/melange/Stdlib/Float"><code>Stdlib.Float</code> module</a>. The bindings to the JavaScript APIs that manipulate float values can be found in the <a class="text-ocaml" target="_self" href="./api/ml/melange/Js/Float"><code>Js.Float</code> module</a><a class="text-reasonml" target="_self" href="./api/re/melange/Js/Float"><code>Js.Float</code> module</a>.</p><h3 id="integers" tabindex="-1">Integers <a class="header-anchor" href="#integers" aria-label="Permalink to &quot;Integers&quot;">â€‹</a></h3><p>In Melange, integers are limited to 32 bits due to the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#fixed-width_number_conversion" target="_blank" rel="noreferrer">fixed-width conversion</a> of bitwise operations in JavaScript. While Melange integers compile to JavaScript numbers, treating them interchangeably can result in unexpected behavior due to differences in precision. Even though bitwise operations in JavaScript are constrained to 32 bits, integers themselves are represented using the same floating-point format <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#number_encoding" target="_blank" rel="noreferrer">as numbers</a>, allowing for a larger range of representable integers in JavaScript compared to Melange. When dealing with large numbers, it is advisable to use floats instead. For instance, floats are used in bindings like <code>Js.Date</code>.</p><p>The Melange standard library provides a <a class="text-ocaml" target="_self" href="./api/ml/melange/Stdlib/Int"><code>Stdlib.Int</code> module</a><a class="text-reasonml" target="_self" href="./api/re/melange/Stdlib/Int"><code>Stdlib.Int</code> module</a>. The bindings to work with JavaScript integers are in the <a class="text-ocaml" target="_self" href="./api/ml/melange/Js/Int"><code>Js.Int</code> module</a><a class="text-reasonml" target="_self" href="./api/re/melange/Js/Int"><code>Js.Int</code> module</a>.</p><h3 id="arrays" tabindex="-1">Arrays <a class="header-anchor" href="#arrays" aria-label="Permalink to &quot;Arrays&quot;">â€‹</a></h3><p>Melange arrays compile to JavaScript arrays. But note that unlike JavaScript arrays, all the values in a Melange array need to have the same type.</p><p>Another difference is that OCaml arrays are fixed-sized, but on Melange side this constraint is relaxed. You can change an arrayâ€™s length using functions like <code>Js.Array.push</code>, available in the bindings to the JavaScript APIs in the <a class="text-ocaml" target="_self" href="./api/ml/melange/Js/Array"><code>Js.Array</code> module</a><a class="text-reasonml" target="_self" href="./api/re/melange/Js/Array"><code>Js.Array</code> module</a>.</p><p>Melange standard library also has a module to work with arrays, available in the <a class="text-ocaml" target="_self" href="./api/ml/melange/Stdlib/Array"><code>Stdlib.Array</code> module</a><a class="text-reasonml" target="_self" href="./api/re/melange/Stdlib/Array"><code>Stdlib.Array</code> module</a>.</p><h3 id="tuples" tabindex="-1">Tuples <a class="header-anchor" href="#tuples" aria-label="Permalink to &quot;Tuples&quot;">â€‹</a></h3><p>OCaml tuples are compiled to JavaScript arrays. This is convenient when writing bindings that will use a JavaScript array with heterogeneous values, but that happens to have a fixed length.</p><p>As a real world example of this can be found in <a href="https://github.com/reasonml/reason-react/" target="_blank" rel="noreferrer">ReasonReact</a>, the Melange bindings for <a href="https://react.dev/" target="_blank" rel="noreferrer">React</a>. In these bindings, component effects dependencies are represented as OCaml tuples, so they get compiled cleanly to JavaScript arrays by Melange.</p><p>For example, some code like this:</p><div class="language-ocaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ocaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> React</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">useEffect2 (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) (foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bar)</span></span></code></pre></div><div class="language-reasonml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reasonml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> React</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">useEffect2(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">()</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> None</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (foo</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bar))</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">;</span></span></code></pre></div><p>Will produce:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">React.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">useEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {}, [foo, bar]);</span></span></code></pre></div><h3 id="booleans" tabindex="-1">Booleans <a class="header-anchor" href="#booleans" aria-label="Permalink to &quot;Booleans&quot;">â€‹</a></h3><p>Values of type <code>bool</code> compile to JavaScript booleans.</p><h3 id="records" tabindex="-1">Records <a class="header-anchor" href="#records" aria-label="Permalink to &quot;Records&quot;">â€‹</a></h3><p>Melange records map directly to JavaScript objects. If the record fields include non-shared data types (like variants), these values should be transformed separately, and not be directly used in JavaScript.</p><p>Extensive documentation about interfacing with JavaScript objects using records can be found in <a href="./working-with-js-objects-and-values.html#bind-to-js-object">the section below</a>.</p><h3 id="regular-expressions" tabindex="-1">Regular expressions <a class="header-anchor" href="#regular-expressions" aria-label="Permalink to &quot;Regular expressions&quot;">â€‹</a></h3><p>Regular expressions created using the <code>%mel.re</code> extension node compile to their JavaScript counterpart.</p><p>For example:</p><div class="language-ocaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ocaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%mel.re</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/b/g&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><div class="language-reasonml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reasonml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">re</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> &quot;/b/g&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">;</span></span></code></pre></div><p>Will compile to:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>A regular expression like the above is of type <code>Js.Re.t</code>. The <a class="text-ocaml" target="_self" href="./api/ml/melange/Js/Re"><code>Js.Re</code> module</a><a class="text-reasonml" target="_self" href="./api/re/melange/Js/Re"><code>Js.Re</code> module</a> provides the bindings to the JavaScript functions that operate over regular expressions.</p><h2 id="non-shared-data-types" tabindex="-1">Non-shared data types <a class="header-anchor" href="#non-shared-data-types" aria-label="Permalink to &quot;Non-shared data types&quot;">â€‹</a></h2><p>The following types differ too much between Melange and JavaScript, so while they can always be manipulated from JavaScript, it is recommended to transform them before doing so.</p><ul><li>Variants and polymorphic variants: Better transform them into readable JavaScript values before manipulating them from JavaScript, Melange provides <a href="./advanced-js-interop.html#generate-getters-setters-and-constructors">some helpers</a> to do so.</li><li>Exceptions</li><li>Option (a variant type): Better use the <code>Js.Nullable.fromOption</code> and <code>Js.Nullable.toOption</code> functions in the <a class="text-ocaml" target="_self" href="./api/ml/melange/Js/Nullable"><code>Js.Nullable</code> module</a><a class="text-reasonml" target="_self" href="./api/re/melange/Js/Nullable"><code>Js.Nullable</code> module</a> to transform them into either <code>null</code> or <code>undefined</code> values.</li><li>List (also a variant type): use <code>Array.of_list</code> and <code>Array.to_list</code> in the <a class="text-ocaml" target="_self" href="./api/ml/melange/Stdlib/Array"><code>Stdlib.Array</code> module</a><a class="text-reasonml" target="_self" href="./api/re/melange/Stdlib/Array"><code>Stdlib.Array</code> module</a>.</li><li>Character</li><li>Int64</li><li>Lazy values</li></ul>`,61),l=[n];function h(r,p,o,d,k,c){return i(),a("div",null,l)}const u=s(t,[["render",h]]);export{y as __pageData,u as default};
