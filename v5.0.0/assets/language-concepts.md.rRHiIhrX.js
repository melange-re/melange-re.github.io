import{_ as s,c as i,o as a,V as t}from"./chunks/framework.LM2Gdl7S.js";const y=JSON.parse('{"title":"Language concepts","description":"","frontmatter":{},"headers":[],"relativePath":"language-concepts.md","filePath":"language-concepts.md"}'),e={name:"language-concepts.md"},n=t(`<h1 id="language-concepts" tabindex="-1">Language concepts <a class="header-anchor" href="#language-concepts" aria-label="Permalink to &quot;Language concepts&quot;">​</a></h1><p>The concepts covered in the following sections are a small subset of the OCaml language. However, they are essential for understanding how to communicate with JavaScript, and the features that Melange exposes to do so.</p><h2 id="extension-nodes-and-attributes" tabindex="-1">Extension nodes and attributes <a class="header-anchor" href="#extension-nodes-and-attributes" aria-label="Permalink to &quot;Extension nodes and attributes&quot;">​</a></h2><p>In order to interact with JavaScript, Melange needs to extend the language to provide blocks that express these interactions.</p><p>One approach could be to introduce new syntactic constructs (keywords and such) to do so, for example:</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>javascript add : int -&gt; int -&gt; int = {|function(x,y){</span></span>
<span class="line"><span>  return x + y</span></span>
<span class="line"><span>}|}</span></span></code></pre></div><p>But this would break compatibility with OCaml, which is one of the main goals of Melange.</p><p>Fortunately, OCaml provides mechanisms to extend its language without breaking compatibility with the parser or the language. These mechanisms are composed by two parts:</p><ul><li>First, some syntax additions to define parts of the code that will be extended or replaced</li><li>Second, compile-time OCaml native programs called <a href="https://ocaml.org/docs/metaprogramming" target="_blank" rel="noreferrer">PPX rewriters</a>, that will read the syntax additions defined above and proceed to extend or replace them</li></ul><p>The syntax additions come in two flavors, called <a href="https://v2.ocaml.org/manual/extensionnodes.html" target="_blank" rel="noreferrer">extension nodes</a> and <a href="https://v2.ocaml.org/manual/attributes.html" target="_blank" rel="noreferrer">attributes</a>.</p><h3 id="extension-nodes" tabindex="-1">Extension nodes <a class="header-anchor" href="#extension-nodes" aria-label="Permalink to &quot;Extension nodes&quot;">​</a></h3><p>Extension nodes are blocks that are supposed to be replaced by a specific type of PPX rewriters called extenders. Extension nodes use the <code>%</code> character to be identified. Extenders will take the extension node and replace it with a valid OCaml AST (abstract syntax tree).</p><p>An example where Melange uses extension nodes to communicate with JavaScript is to produce &quot;raw&quot; JavaScript inside a Melange program:</p><div class="language-ocaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ocaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%%mel.raw</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;var a = 1; var b = 2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%mel.raw</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;a + b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><div class="language-reasonml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reasonml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%%</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">raw</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> &quot;var a = 1; var b = 2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">raw</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> &quot;a + b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">;</span></span></code></pre></div><p>Which will generate the following JavaScript code:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> add </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span></span></code></pre></div><p>The difference between one and two percentage characters is detailed in the <a href="https://v2.ocaml.org/manual/extensionnodes.html" target="_blank" rel="noreferrer">OCaml documentation</a>.</p><h3 id="attributes" tabindex="-1">Attributes <a class="header-anchor" href="#attributes" aria-label="Permalink to &quot;Attributes&quot;">​</a></h3><p>Attributes are &quot;decorations&quot; applied to specific parts of the code to provide additional information. In Melange, attributes are used in two ways to enhance the expressiveness of generating JavaScript code: either reusing existing OCaml built-in attributes or defining new ones.</p><h4 id="reusing-ocaml-attributes" tabindex="-1">Reusing OCaml attributes <a class="header-anchor" href="#reusing-ocaml-attributes" aria-label="Permalink to &quot;Reusing OCaml attributes&quot;">​</a></h4><p>The first approach is leveraging the existing <a href="https://v2.ocaml.org/manual/attributes.html#ss:builtin-attributes" target="_blank" rel="noreferrer">OCaml’s built-in attributes</a> to be used for JavaScript generation.</p><p>One prominent example of OCaml attributes that can be used in Melange projects is the <code>unboxed</code> attribute, which optimizes the compilation of single-field records and variants with a single tag to their raw values. This is useful when defining type aliases that we don’t want to mix up, or when binding to JavaScript code that uses heterogeneous collections. An example of the latter is discussed in the <a href="./working-with-js-objects-and-values.html#variadic-function-arguments">variadic function arguments</a> section.</p><p>For instance:</p><div class="language-ocaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ocaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> of</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@@unboxed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> student_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;alice&quot;</span></span></code></pre></div><div class="language-reasonml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reasonml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">unboxed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">  |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> student_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">&quot;alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">;</span></span></code></pre></div><p>Compiles into:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>Other OCaml pre-built attributes like <code>alert</code> or <code>deprecated</code> can be used with Melange as well.</p><h4 id="defining-new-attributes" tabindex="-1">Defining new attributes <a class="header-anchor" href="#defining-new-attributes" aria-label="Permalink to &quot;Defining new attributes&quot;">​</a></h4><p>The second approach is introducing new attributes specifically designed for Melange, such as the <a href="./working-with-js-objects-and-values.html#bind-to-object-properties"><code>mel.set</code> attribute</a> used to bind to properties of JavaScript objects. The complete list of attributes introduced by Melange can be found <a href="./attributes-and-extension-nodes.html">here</a>.</p><p>Attribute annotations can use one, two or three <code>@</code> characters depending on their placement in the code and which kind of syntax tree node they are annotating. More information about attributes can be found in the <a href="https://v2.ocaml.org/manual/attributes.html" target="_blank" rel="noreferrer">dedicated OCaml manual page</a>.</p><p>Here are some samples using Melange attributes <a href="./working-with-js-objects-and-values.html#bind-to-object-properties"><code>mel.set</code></a> and <a href="./working-with-js-objects-and-values.html#using-ocaml-records"><code>mel.as</code></a>:</p><div class="language-ocaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ocaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> setTitleDom </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@@mel.set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@mel.as</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@mel.as</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;n&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-reasonml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reasonml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> document</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setTitleDom</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">document</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> unit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> &quot;title&quot;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.as &quot;a&quot;]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  age</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> int</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.as &quot;n&quot;]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> string</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">;</span></span></code></pre></div><p>To learn more about preprocessors, attributes and extension nodes, check the <a href="https://ocaml.org/docs/metaprogramming#ppx-rewriters" target="_blank" rel="noreferrer">section about PPX rewriters</a> in the OCaml docs.</p><h2 id="external-functions" tabindex="-1">External functions <a class="header-anchor" href="#external-functions" aria-label="Permalink to &quot;External functions&quot;">​</a></h2><p>Most of the system that Melange exposes to communicate with JavaScript is built on top of an OCaml language construct called <code>external</code>.</p><p><code>external</code> is a keyword for declaring a value in OCaml that will <a href="https://v2.ocaml.org/manual/intfc.html" target="_blank" rel="noreferrer">interface with C code</a>:</p><div class="language-ocaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ocaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> my_c_function </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;someCFunctionName&quot;</span></span></code></pre></div><div class="language-reasonml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reasonml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> my_c_function</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> &quot;someCFunctionName&quot;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">;</span></span></code></pre></div><p>It is like a <code>let</code> binding, except that the body of an external is a string. That string has a specific meaning depending on the context. For native OCaml, it usually refers to a C function with that name. For Melange, it refers to the functions or values that exist in the runtime JavaScript code, and will be used from Melange.</p><p>In Melange, externals can be used to <a href="./working-with-js-objects-and-values.html#using-global-functions-or-values">bind to global JavaScript objects</a>. They can also be decorated with certain <code>[@mel.xxx]</code> attributes to facilitate the creation of bindings in specific scenarios. Each one of the <a href="./attributes-and-extension-nodes.html#attributes">available attributes</a> will be further explained in the next sections.</p><p>Once declared, one can use an <code>external</code> as a normal value. Melange external functions are turned into the expected JavaScript values, inlined into their callers during compilation, and completely erased afterwards. They don’t appear in the JavaScript output, so there are no costs on bundling size.</p><p><strong>Note</strong>: it is recommended to use external functions and the <code>[@mel.xxx]</code> attributes in the interface files as well, as this allows some optimizations where the resulting JavaScript values can be directly inlined at the call sites.</p><h3 id="special-identity-external" tabindex="-1">Special identity external <a class="header-anchor" href="#special-identity-external" aria-label="Permalink to &quot;Special identity external&quot;">​</a></h3><p>One external worth mentioning is the following one:</p><div class="language-ocaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ocaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> int</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> danger_zone </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">dentity&quot;</span></span></code></pre></div><div class="language-reasonml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reasonml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> string</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> int</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> danger_zone</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> bar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">identity</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">&quot;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">;</span></span></code></pre></div><p>This is a final escape hatch which does nothing but convert from the type <code>foo</code> to <code>bar</code>. In the following sections, if you ever fail to write an <code>external</code>, you can fall back to using this one. But try not to.</p><h2 id="abstract-types" tabindex="-1">Abstract types <a class="header-anchor" href="#abstract-types" aria-label="Permalink to &quot;Abstract types&quot;">​</a></h2><p>In the subsequent sections, you will come across examples of bindings where a type is defined without being assigned to a value. Here is an example:</p><div class="language-ocaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ocaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document</span></span></code></pre></div><div class="language-reasonml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reasonml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> document</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">;</span></span></code></pre></div><p>These types are referred to as &quot;abstract types&quot; and are commonly used together with external functions that define operations over values when communicating with JavaScript.</p><p>Abstract types enable defining types for specific values originating from JavaScript while omitting unnecessary details. An illustration is the <code>document</code> type mentioned earlier, which has several <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document" target="_blank" rel="noreferrer">properties</a>. By using abstract types, one can focus solely on the required aspects of the <code>document</code> value that the Melange program requires, rather than defining all its properties. Consider the following example:</p><div class="language-ocaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ocaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;document&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> set_title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@@mel.set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><div class="language-reasonml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reasonml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> document</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> document</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> document</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> &quot;document&quot;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> set_title</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">document</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> unit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> &quot;title&quot;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">;</span></span></code></pre></div><p>Subsequent sections delve into the details about the <a href="./working-with-js-objects-and-values.html#bind-to-object-properties"><code>mel.set</code></a> attribute and <a href="./working-with-js-objects-and-values.html#using-global-functions-or-values">how to bind to global values</a> like <code>document</code>.</p><p>For a comprehensive understanding of abstract types and their usefulness, refer to the &quot;Encapsulation&quot; section of the <a href="https://cs3110.github.io/textbook/chapters/modules/encapsulation.html" target="_blank" rel="noreferrer">OCaml Cornell textbook</a>.</p><h2 id="pipe-operators" tabindex="-1">Pipe operators <a class="header-anchor" href="#pipe-operators" aria-label="Permalink to &quot;Pipe operators&quot;">​</a></h2><p>There are two pipe operators available in Melange:</p><ul><li>A <em>pipe last</em> operator <code>|&gt;</code>, available <a href="https://v2.ocaml.org/api/Stdlib.html#1_Compositionoperators" target="_blank" rel="noreferrer">in OCaml</a> and inherited in Melange</li><li>A <em>pipe first</em> operator <code class="text-ocaml">|.</code><code class="text-reasonml">-&gt;</code>, available exclusively in Melange</li></ul><p>Let’s see the differences between the two.</p><h3 id="pipe-last" tabindex="-1">Pipe last <a class="header-anchor" href="#pipe-last" aria-label="Permalink to &quot;Pipe last&quot;">​</a></h3><p>Since version 4.01, OCaml includes a reverse application or &quot;pipe&quot; (<code>|&gt;</code>) operator, an infix operator that applies the result from the previous expression the next function. As a backend for OCaml, Melange inherits this operator.</p><p>The pipe operator could be implemented like this (the real implementation is a bit <a href="https://github.com/ocaml/ocaml/blob/d9547617e8b14119beacafaa2546cbebfac1bfe5/stdlib/stdlib.ml#L48" target="_blank" rel="noreferrer">different</a>):</p><div class="language-ocaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ocaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ( </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ) f g </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g f</span></span></code></pre></div><div class="language-reasonml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reasonml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">|&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (f</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g) </span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g(f)</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">;</span></span></code></pre></div><p>This operator is useful when multiple functions are applied to some value in sequence, with the output of each function becoming the input of the next (a <em>pipeline</em>).</p><p>For example, assuming we have a function <code>square</code> defined as:</p><div class="language-ocaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ocaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> square</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x</span></span></code></pre></div><div class="language-reasonml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reasonml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> square</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">;</span></span></code></pre></div><p>We are using it like:</p><div class="language-ocaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ocaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ten</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> succ (square </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="language-reasonml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reasonml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ten</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> succ(square(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">;</span></span></code></pre></div><p>The pipe operator allows to write the computation for <code>ten</code> in left-to-right order, as <a href="https://v2.ocaml.org/manual/expr.html#ss:precedence-and-associativity" target="_blank" rel="noreferrer">it has left associativity</a>:</p><div class="language-ocaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ocaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ten</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> square </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> succ</span></span></code></pre></div><div class="language-reasonml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reasonml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ten</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;"> |&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> square </span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">|&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> succ</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">;</span></span></code></pre></div><p>When working with functions that can take multiple arguments, the pipe operator works best when the functions take the data we are processing as the last argument. For example:</p><div class="language-ocaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ocaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> List</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fold_left ( </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sum_sq</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> List</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">map square </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">(* [1; 4; 9] *)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum             </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">(* 1 + 4 + 9 *)</span></span></code></pre></div><div class="language-reasonml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reasonml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> List</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fold_left((</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sum_sq</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  [1</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3]</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">  |&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> List</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">map(square)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* [1; 4; 9] */</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">  |&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* 1 + 4 + 9 */</span></span></code></pre></div><p>The above example can be written concisely because the <code>List.map</code> function in the <a href="https://v2.ocaml.org/api/Stdlib.List.html" target="_blank" rel="noreferrer">OCaml standard library</a> takes the list as the second argument. This convention is sometimes referred to as &quot;data-last&quot;, and is widely adopted in the OCaml ecosystem. Data-last and the pipe operator <code>|&gt;</code> work great with currying, so they are a great fit for the language.</p><p>However, there are some limitations when using data-last when it comes to error handling. In the given example, if we mistakenly used the wrong function:</p><div class="language-ocaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ocaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sum_sq</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> List</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">map </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cat</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum</span></span></code></pre></div><div class="language-reasonml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reasonml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sum_sq</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> [1</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3]</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;"> |&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> List</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">map(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cat) </span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">|&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">;</span></span></code></pre></div><p>The compiler would rightfully raise an error:</p><div class="language-text vp-adaptive-theme"><pre class="text-ocaml shiki shiki-themes github-light github-dark vp-code"><code>4 |   [ 1; 2; 3 ]
          ^
  Error: The constant 1 has type int but an expression was expected of type
          string</code></pre><pre class="text-reasonml shiki shiki-themes github-light github-dark vp-code"><code>1 |   [ 1, 2, 3 ]
          ^
  Error: The constant 1 has type int but an expression was expected of type
          string</code></pre></div><p>Note that instead of telling us that we are passing the wrong function in <code>List.map</code> (<code>String.cat</code>), the error points to the list itself. This behavior aligns with the way type inference works, as the compiler infers types from left to right. Since <code>[ 1; 2; 3 ] |&gt; List.map String.cat</code> is equivalent to <code>List.map String.cat [ 1; 2; 3 ]</code>, the type mismatch is detected when the list is type checked, after <code>String.cat</code> has been processed.</p><p>With the goal of addressing this kind of limitations, Melange introduces the pipe first operator <code class="text-ocaml">|.</code><code class="text-reasonml">-&gt;</code>.</p><h3 id="pipe-first" tabindex="-1">Pipe first <a class="header-anchor" href="#pipe-first" aria-label="Permalink to &quot;Pipe first&quot;">​</a></h3><p>To overcome the constraints mentioned above, Melange introduces the pipe first operator <code class="text-ocaml">|.</code><code class="text-reasonml">-&gt;</code>.</p><p>As its name suggests, the pipe first operator is better suited for functions where the data is passed as the first argument.</p><p>The functions in the <a class="text-ocaml" target="_self" href="./api/ml/melange/Belt"><code>Belt</code> library</a><a class="text-reasonml" target="_self" href="./api/re/melange/Belt"><code>Belt</code> library</a> included with Melange have been designed with the data-first convention in mind, so they work best with the pipe first operator.</p><p>For example, we can rewrite the example above using <code>Belt.List.map</code> and the pipe first operator:</p><div class="language-ocaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ocaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sum_sq</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Belt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">List</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">map square</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum</span></span></code></pre></div><div class="language-reasonml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reasonml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sum_sq</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> [1</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3]</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Belt</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">map(square))</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sum</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">;</span></span></code></pre></div><p>We can see the difference on the error we get if the wrong function is passed to <code>Belt.List.map</code>:</p><div class="language-ocaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ocaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sum_sq</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Belt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">List</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">map </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cat</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum</span></span></code></pre></div><div class="language-reasonml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reasonml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sum_sq</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> [1</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3]</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Belt</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">map(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cat))</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sum</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">;</span></span></code></pre></div><p>The compiler will show this error message:</p><div class="language-text vp-adaptive-theme"><pre class="text-ocaml shiki shiki-themes github-light github-dark vp-code"><code>4 |   |. Belt.List.map String.cat
                       ^^^^^^^^^^
Error: The value String.cat has type string -&gt; string -&gt; string
       but an expression was expected of type int -&gt; &#39;a
       Type string is not compatible with type int</code></pre><pre class="text-reasonml shiki shiki-themes github-light github-dark vp-code"><code>2 | let sum_sq = [1, 2, 3]-&gt;(Belt.List.map(String.cat))-&gt;sum;
                                           ^^^^^^^^^^
Error: This expression has type string -&gt; string -&gt; string
       but an expression was expected of type int -&gt; &#39;a
       Type string is not compatible with type int</code></pre></div><p>The error points now to the function passed to <code>Belt.List.map</code>, which is more natural with the way the code is being written.</p><p>Melange supports writing bindings to JavaScript using any of the two conventions, data-first or data-last, as shown in the <a href="./working-with-js-objects-and-values.html#chaining">&quot;Chaining&quot; section</a>.</p><p>For further details about the differences between the two operators, the data-first and data-last conventions and the trade-offs between them, one can refer to <a href="https://www.javierchavarri.com/data-first-and-data-last-a-comparison/" target="_blank" rel="noreferrer">this related blog post</a>.</p>`,105),h=[n];function l(p,k,r,d,o,g){return a(),i("div",null,h)}const E=s(e,[["render",l]]);export{y as __pageData,E as default};
