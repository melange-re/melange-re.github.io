import{_ as e,c as s,o as a,V as i}from"./chunks/framework.LM2Gdl7S.js";const u=JSON.parse('{"title":"Build system","description":"","frontmatter":{},"headers":[],"relativePath":"build-system.md","filePath":"build-system.md"}'),t={name:"build-system.md"},n=i(`<h1 id="build-system" tabindex="-1">Build system <a class="header-anchor" href="#build-system" aria-label="Permalink to &quot;Build system&quot;">​</a></h1><p>Melange is deeply integrated with <a href="https://dune.build/" target="_blank" rel="noreferrer">Dune</a>, the most widely used build system for OCaml. This integration enables developers to create a single project with both OCaml native executables and frontend applications that are built with Melange, and even share code between both platforms in an easy manner.</p><p>Dune orchestrates and plans the work needed to compile a project, copies files when needed, and prepares everything so that Melange takes OCaml source files and convert them into JavaScript code.</p><p>Let’s now dive into the Melange compilation model and go through a brief guide on how to work with Dune in Melange projects.</p><h3 id="compilation-model" tabindex="-1">Compilation model <a class="header-anchor" href="#compilation-model" aria-label="Permalink to &quot;Compilation model&quot;">​</a></h3><p>Melange compiles a single source file to a single JavaScript module. This compilation model simplifies debugging the produced JavaScript code and allows to import assets like CSS files and fonts in the same way as one would do in a JavaScript project. It also facilitates the integration of Melange with JavaScript module bundlers such as <a href="https://webpack.js.org/" target="_blank" rel="noreferrer">Webpack</a>, or <a href="https://npmtrends.com/@vercel/ncc-vs-esbuild-vs-parcel-vs-rollup" target="_blank" rel="noreferrer">other alternatives</a>.</p><p>As an example of integration with Webpack, you can refer to the <a href="https://github.com/melange-re/melange-opam-template" target="_blank" rel="noreferrer">Melange opam template</a>. To create a repository based on this template, follow <a href="https://github.com/melange-re/melange-opam-template/generate" target="_blank" rel="noreferrer">this link</a>.</p><h3 id="how-is-melange-integrated-into-dune" tabindex="-1">How is Melange integrated into Dune? <a class="header-anchor" href="#how-is-melange-integrated-into-dune" aria-label="Permalink to &quot;How is Melange integrated into Dune?&quot;">​</a></h3><p>Dune is an OCaml build system that Melange projects can use to specify libraries and applications. It’s optimized for monorepos and makes project maintenance easier. This section provides an overview of Dune’s features and explains how to use it to build Melange applications.</p><h4 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to &quot;Features&quot;">​</a></h4><p>Dune is designed with OCaml in mind, which makes it an ideal tool for Melange developers. It provides several benefits, including:</p><ul><li>Easy specification of libraries and executables.</li><li>Optimized for monorepos: no need for <code>npm link</code> or similar solutions.</li><li>Easy project maintenance, as one can rearrange folders without updating the paths to libraries.</li><li>Hygiene is maintained in Dune by building out of source: all compilation artifacts are placed in a separate <code>_build</code> folder. Users can optionally <a href="https://dune.readthedocs.io/en/stable/reference/dune/rule.html#promote" target="_blank" rel="noreferrer">copy them back to the source tree</a>.</li><li>Dune provides a variety of additional features including <a href="https://dune.readthedocs.io/en/stable/tests.html" target="_blank" rel="noreferrer">cram tests</a>, integration with <a href="https://dune.readthedocs.io/en/stable/documentation.html" target="_blank" rel="noreferrer">Odoc</a>, Melange, <a href="https://dune.readthedocs.io/en/stable/jsoo.html" target="_blank" rel="noreferrer">Js_of_ocaml</a>, <a href="https://dune.readthedocs.io/en/stable/usage.html#watch-mode" target="_blank" rel="noreferrer">watch mode</a>, Merlin/LSP integration for editor support, <a href="https://dune.readthedocs.io/en/stable/cross-compilation.html" target="_blank" rel="noreferrer">cross compilation</a>, and <a href="https://dune.readthedocs.io/en/stable/howto/opam-file-generation.html" target="_blank" rel="noreferrer">generation of <code>opam</code> files</a>.</li></ul><h4 id="creating-a-new-project" tabindex="-1">Creating a new project <a class="header-anchor" href="#creating-a-new-project" aria-label="Permalink to &quot;Creating a new project&quot;">​</a></h4><p>To understand how to use Dune, let’s create a small Melange application.</p><p>First of all, create an opam switch, as shown in the <a href="./package-management.html">package management section</a>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">opam</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> switch create . </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.0 --deps-only</span></span></code></pre></div><p>Install the latest versions of Dune and Melange in the switch:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">opam</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">opam</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install dune melange</span></span></code></pre></div><div class="text-reasonml"> As we will be using Reason syntax, let’s install the <code>reason</code> package too: <div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">opam</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install reason</span></span></code></pre></div></div><p>Create a file named <code>dune-project</code>. This file will tell Dune a few things about our project configuration:</p><div class="language-dune vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dune</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lang dune </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> melange </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>The first line <code>(lang dune 3.8)</code> tells Dune which version of the &quot;Dune language&quot; (the language used in <code>dune</code> files) we want to use. Melange support in Dune is only available from version 3.8.</p><p>The second line <code>(using melange 0.1)</code> tells Dune we want to use the <a href="https://dune.readthedocs.io/en/stable/reference/dune-project/using.html" target="_blank" rel="noreferrer">Melange extension of the Dune language</a>.</p><h4 id="adding-a-library" tabindex="-1">Adding a library <a class="header-anchor" href="#adding-a-library" aria-label="Permalink to &quot;Adding a library&quot;">​</a></h4><p>Next, create a folder <code>lib</code>, and a <code>dune</code> file inside. Put the following content inside the <code>dune</code> file:</p><div class="language-dune vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dune</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">library</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lib)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">modes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> melange))</span></span></code></pre></div><div class="text-ocaml"> Create a file <code>lib.ml</code> in the same folder: </div><div class="text-reasonml"> Create a file <code>lib.re</code> in the same folder: </div><div class="language-ocaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ocaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Jane&quot;</span></span></code></pre></div><div class="language-reasonml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reasonml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> &quot;Jane&quot;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">;</span></span></code></pre></div><p>The top level configuration entries —like the <code>library</code> one that appears in the <code>dune</code> file— are referred to as <em>stanzas</em>, and the inner ones —like <code>name</code> and <code>modes</code>— are referred to as <em>fields</em> of the stanza.</p><p>All stanzas are well covered in the Dune documentation site, where we can find the reference for the <a href="https://dune.readthedocs.io/en/stable/reference/dune/library.html" target="_blank" rel="noreferrer"><code>library</code> stanza</a>.</p><p>Dune is designed to minimize the need for configuration changes when modifying the project folder structure. For example, you can move the <code>lib</code> folder to a different location within the project, and all build commands will continue to work without requiring any updates to any <code>dune</code> file. This feature proves to be quite convenient.</p><h4 id="entry-points-with-melange-emit" tabindex="-1">Entry points with <code>melange.emit</code> <a class="header-anchor" href="#entry-points-with-melange-emit" aria-label="Permalink to &quot;Entry points with \`melange.emit\`&quot;">​</a></h4><p><strong>Libraries are useful to encapsulate behavior and logical components of our application</strong>, but they won’t produce any JavaScript artifacts on their own.</p><p>To generate JavaScript code, we need to define an entry point of our application. In the root folder, create another <code>dune</code> file:</p><div class="language-dune vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dune</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">melange.emit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> app)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">libraries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lib))</span></span></code></pre></div><div class="text-ocaml"> And an <code>app.ml</code> file: </div><div class="text-reasonml"> And an <code>app.re</code> file: </div><div class="language-ocaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ocaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Js</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">log </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Lib</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span></span></code></pre></div><div class="language-reasonml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reasonml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Js</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">log(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Lib</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name)</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">;</span></span></code></pre></div><p>The <code>melange.emit</code> stanza tells Dune to generate JavaScript files from a set of libraries and modules. In-depth documentation about this stanza can be found in the <a href="https://dune.readthedocs.io/en/stable/melange.html#melange-emit" target="_blank" rel="noreferrer">Dune docs</a>.</p><p>The file structure of the app should look something like this:</p><div class="language-text vp-adaptive-theme"><pre class="text-ocaml shiki shiki-themes github-light github-dark vp-code"><code>project_name/
├── _opam
├── lib
│   ├── dune
│   └── lib.ml
├── dune-project
├── dune
└── app.ml</code></pre><pre class="text-reasonml shiki shiki-themes github-light github-dark vp-code"><code>project_name/
├── _opam
├── lib
│   ├── dune
│   └── lib.re
├── dune-project
├── dune
└── app.re</code></pre></div><h4 id="building-the-project" tabindex="-1">Building the project <a class="header-anchor" href="#building-the-project" aria-label="Permalink to &quot;Building the project&quot;">​</a></h4><p>We can build the project now, which will produce the JavaScript code from our sources using the Melange compiler:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dune build @melange</span></span></code></pre></div><p>This command tells dune to build all the targets that have an alias <code>melange</code> attached to them. <a href="https://dune.readthedocs.io/en/stable/overview.html#term-alias" target="_blank" rel="noreferrer">Aliases</a> are build targets that don’t produce any file and have configurable dependencies.</p><p>By default, all the targets in a <code>melange.emit</code> stanza and the libraries it depends on are attached to the <code>melange</code> alias. We can define explicit aliases though, as we will see below.</p><p>If everything went well, we should be able to run the resulting JavaScript with Node.js. As we mentioned above while going through its features, Dune places all artifacts inside the <code>_build</code> folder to not pollute any source folders. So we will point Node to the script placed in that folder, to see the expected output:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node _build/default/app/app.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Jane</span></span></code></pre></div><h4 id="javascript-artifacts-layout" tabindex="-1">JavaScript artifacts layout <a class="header-anchor" href="#javascript-artifacts-layout" aria-label="Permalink to &quot;JavaScript artifacts layout&quot;">​</a></h4><p>In the command above we had to look for the <code>app.js</code> file inside an <code>app</code> folder, but we don’t have any such folder in our sources. This folder is the one declared in the <code>target</code> field of the <code>melange.emit</code> stanza, which Dune will use to know where to place the generated JavaScript artifacts.</p><p>As a more complex example, consider the following setup:</p><div class="language-text vp-adaptive-theme"><pre class="text-ocaml shiki shiki-themes github-light github-dark vp-code"><code>project_name/
├── dune-project
├── lib
│   ├── dune
│   └── foo.ml
└── emit
    └── dune</code></pre><pre class="text-reasonml shiki shiki-themes github-light github-dark vp-code"><code>project_name/
├── dune-project
├── lib
│   ├── dune
│   └── foo.re
└── emit
    └── dune</code></pre></div><p>With <code>emit/dune</code> being:</p><div class="language-dune vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dune</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">melange.emit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> app)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">libraries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lib))</span></span></code></pre></div><p>And <code>lib/dune</code>:</p><div class="language-dune vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dune</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">library</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lib)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">modes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> melange))</span></span></code></pre></div><div class="text-ocaml"> Then, the JavaScript artifacts for \`foo.ml\` will be placed under: </div><div class="text-reasonml"> Then, the JavaScript artifacts for \`foo.re\` will be placed under: </div><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>_build/default/emit/app/lib/foo.js</span></span></code></pre></div><p>More generically:</p><ul><li>For a <code>melange.emit</code> stanza defined in a <code>dune</code> file located in the relative workspace path <code>$melange-emit-folder</code></li><li>Which includes a <code>target</code> field named <code>$target</code>, like <code>(target $target)</code></li><li>For a source file called <code class="text-ocaml">$name.ml</code><code class="text-reasonml">$name.re</code>, placed in the relative workspace path <code>$path-to-source-file</code></li></ul><p>The path to the generated JavaScript file from <code class="text-ocaml">$name.ml</code><code class="text-reasonml">$name.re</code> will be:</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>_build/default/$melange-emit-folder/$target/$path-to-source-file/$name.js</span></span></code></pre></div><h4 id="guidelines-for-melange-emit" tabindex="-1">Guidelines for <code>melange.emit</code> <a class="header-anchor" href="#guidelines-for-melange-emit" aria-label="Permalink to &quot;Guidelines for \`melange.emit\`&quot;">​</a></h4><p>The following recommendations around <code>melange.emit</code> have been tested within large industrial projects, and have proven to be helpful guidelines to deal with complexity, maintenance and build performance.</p><ul><li>To simplify access to the generated JavaScript files from tools like Webpack, it is recommended to place the <code>dune</code> files containing the <code>melange.emit</code> stanzas in the project’s root folder. This ensures that the generated JavaScript files are directly placed under the <code>_build/default/$target</code> path.</li><li>To minimize the risk of inadvertent increases in bundle size, it is advisable to reduce the number of <code>melange.emit</code> stanzas to a minimum, ideally just one. Having multiple <code>melange.emit</code> stanzas may result in multiple copies of JavaScript code generated from the same library. By consolidating the <code>melange.emit</code> stanzas, you can mitigate this issue and ensure more efficient bundle sizes.</li></ul><h4 id="using-aliases" tabindex="-1">Using aliases <a class="header-anchor" href="#using-aliases" aria-label="Permalink to &quot;Using aliases&quot;">​</a></h4><p>The default <code>melange</code> alias is useful for prototyping or when working on small projects, but larger projects might define multiple entry points or <code>melange.emit</code> stanzas. In these cases, it is useful to have a way to build individual stanzas. To do so, one can define explicit aliases for each one of them by using the <code>alias</code> field.</p><p>Let’s define a custom alias <code>my-app</code> for our <code>melange.emit</code> stanza:</p><div class="language-dune vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dune</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">melange.emit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> app)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> my-app)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">libraries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lib))</span></span></code></pre></div><p>Now we can refer to this new alias:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dune build @my-app</span></span></code></pre></div><p>Note that if we try to build again using the default <code>melange</code> alias, Dune will return an error, as there are no more targets attached to it.</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>$ dune build @melange</span></span>
<span class="line"><span>Error: Alias &quot;melange&quot; specified on the command line is empty.</span></span>
<span class="line"><span>It is not defined in . or any of its descendants.</span></span></code></pre></div><h4 id="handling-assets" tabindex="-1">Handling assets <a class="header-anchor" href="#handling-assets" aria-label="Permalink to &quot;Handling assets&quot;">​</a></h4><p>Sometimes we want to use CSS files, fonts, or other assets in our Melange projects. Due to the way Dune works, our assets will have to be copied to the <code>_build</code> folder and installed. To make this process as easy as possible, Dune provides a way to specify these dependencies, depending on the stanza:</p><ul><li>For <code>library</code> stanzas, a field <code>melange.runtime_deps</code></li><li>For <code>melange.emit</code> stanzas, a field <code>runtime_deps</code></li></ul><p>Both fields are documented in the <a href="https://dune.readthedocs.io/en/stable/melange.html#melange-emit" target="_blank" rel="noreferrer">Melange page</a> of the Dune documentation site.</p><p>For the sake of learning how to work with assets in a Melange project, let’s say that we want to read the string in <code>Lib.name</code> from a text file. We will combine the field <code>melange.runtime_deps</code> with some bindings to Node that Melange provides. Check the next section, <a href="./communicate-with-javascript.html">&quot;Communicate with JavaScript&quot;</a>, it you want to learn more about how bindings work.</p><p>So, let’s add a new file <code>name.txt</code> inside <code>lib</code> folder, that just contains the name <code>Jane</code>.</p><p>Then, adapt the <code>lib/dune</code> file. We will need to add the <code>melange.runtime_deps</code> field, as well as a <a href="https://dune.readthedocs.io/en/stable/reference/preprocessing-spec.html" target="_blank" rel="noreferrer"><code>preprocessing</code> field</a> that will allow to use the <code>bs.raw</code> extension (more about these extensions in the <a href="./communicate-with-javascript.html">&quot;Communicate with JavaScript&quot;</a> section), in order to get the value of the <code>__dirname</code> environment variable:</p><div class="language-dune vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dune</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">library</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lib)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">modes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> melange)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">melange.runtime_deps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name.txt)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">preprocess</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> melange.ppx)))</span></span></code></pre></div><div class="text-ocaml"> Finally, update <code>lib/lib.ml</code> to read from the recently added file: </div><div class="text-reasonml"> Finally, update <code>lib/lib.re</code> to read from the recently added file: </div><div class="language-ocaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ocaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> dir</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%mel.raw</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;__dirname&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;name.txt&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Node</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">readFileSync (dir </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ^</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\`ascii</span></span></code></pre></div><div class="language-reasonml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">reasonml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> dir</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">raw</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> &quot;__dirname&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> &quot;name.txt&quot;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Node</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Fs</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">readFileSync(dir </span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">++</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> &quot;/&quot;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;"> ++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> \`</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ascii</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">;</span></span></code></pre></div><p>After these changes, once we build the project, we should still be able to run the application file with Node:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dune build @my-app</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node _build/default/app/app.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Jane</span></span></code></pre></div><p>The same approach could be used to copy fonts, CSS or SVG files, or any other asset in your project.</p><p>Dune offers great flexibility to specify dependencies. Another interesting feature are globs, that allow to simplify the configuration when depending on multiple files. For example:</p><div class="language-dune vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dune</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">library</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">melange.runtime_deps</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">glob_files</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> styles/*.css)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">glob_files</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> images/*.png)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">glob_files</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> static/*.{pdf,txt})))</span></span></code></pre></div><p>See the <a href="https://dune.readthedocs.io/en/stable/concepts/dependency-spec.html" target="_blank" rel="noreferrer">dependency specification docs</a> to learn more about it.</p><p>With runtime dependencies, we have reached the end of this Dune guide for Melange developers. For further details about how Dune works and its integration with Melange, check the <a href="https://dune.readthedocs.io/" target="_blank" rel="noreferrer">Dune documentation</a>, and the <a href="https://github.com/melange-re/melange-opam-template" target="_blank" rel="noreferrer">Melange opam template</a>.</p><h4 id="commonjs-or-es6-modules" tabindex="-1">CommonJS or ES6 modules <a class="header-anchor" href="#commonjs-or-es6-modules" aria-label="Permalink to &quot;CommonJS or ES6 modules&quot;">​</a></h4><p>Melange produces JavaScript modules that export the functions they declare, and declare imports for the values and modules they depend on.</p><p>By default, Melange will produce <a href="https://en.wikipedia.org/wiki/CommonJS" target="_blank" rel="noreferrer">CommonJS</a> modules, but it is possible to configure it to generate <a href="https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015" target="_blank" rel="noreferrer">ES6</a> modules.</p><p>Use the <code>module_systems</code> field in the <a href="https://dune.readthedocs.io/en/stable/melange.html#melange-emit" target="_blank" rel="noreferrer"><code>melange.emit</code> stanza</a> to emit ES6 modules:</p><div class="language-dune vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dune</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">melange.emit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> app)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> my-app)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">libraries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lib)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">module_systems</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> es6))</span></span></code></pre></div><p>If no extension is specified, the resulting JavaScript files will use <code>.js</code>. You can specify a different extension with a pair <code>(&lt;module_system&gt; &lt;extension&gt;)</code>, e.g. <code>(module_systems (es6 mjs))</code>. Multiple module systems can be used in the same field as long as their extensions are different. For example, <code>(module_systems commonjs (es6 mjs))</code> will produce one set of JavaScript files using CommonJS and the <code>.js</code> extension, and another using ES6 and the <code>.mjs</code> extension.</p>`,102),l=[n];function h(o,p,d,r,c,k){return a(),s("div",null,l)}const m=e(t,[["render",h]]);export{u as __pageData,m as default};
