import{_ as s,c as a,o as e,V as n}from"./chunks/framework.BCxdY_ip.js";const v=JSON.parse('{"title":"Module Node","description":"","frontmatter":{},"headers":[],"relativePath":"api/re/melange/Node.md","filePath":"api/re/melange/Node.md"}'),p={name:"api/re/melange/Node.md"},t=n(`<h1 id="module-node" tabindex="-1">Module <code>Node</code> <a class="header-anchor" href="#module-node" aria-label="Permalink to &quot;Module \`Node\`&quot;">â€‹</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>type node_exports;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>type node_module =</span></span>
<span class="line"><span>  Js.t({. id: string</span></span>
<span class="line"><span>    , exports: node_exports</span></span>
<span class="line"><span>    , parent: Js.nullable(node_module)</span></span>
<span class="line"><span>    , filename: string</span></span>
<span class="line"><span>    , loaded: bool</span></span>
<span class="line"><span>    , children: array(node_module)</span></span>
<span class="line"><span>    , paths: array(string)});</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>type node_require =</span></span>
<span class="line"><span>  Js.t({. main: Js.undefined(node_module)</span></span>
<span class="line"><span>    , resolve: Js.Fn.arity1((string =&gt; string))});</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>type string_buffer;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>type buffer;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>type string_buffer_kind(_) =</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>| String : string_buffer_kind(string)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>| Buffer : string_buffer_kind(buffer)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let test: string_buffer =&gt; (string_buffer_kind(&#39;t), &#39;t);</span></span></code></pre></div><p>We expect a good inliner will eliminate such boxing in the future</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>module Path: { ... };</span></span></code></pre></div><p>Node Path API</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>module Fs: { ... };</span></span></code></pre></div><p>Node FS API</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>module Process: { ... };</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>module Module: { ... };</span></span></code></pre></div><p>Node Module API</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>module Buffer: { ... };</span></span></code></pre></div><p>Node Buffer API</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>module Child_process: { ... };</span></span></code></pre></div><p>Node Child Process API</p>`,23),i=[t];function l(o,d,c,h,u,g){return e(),a("div",null,i)}const b=s(p,[["render",l]]);export{v as __pageData,b as default};
