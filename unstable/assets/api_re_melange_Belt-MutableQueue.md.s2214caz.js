import{_ as e,c as a,o as t,V as s}from"./chunks/framework.BCxdY_ip.js";const b=JSON.parse('{"title":"Module Belt.MutableQueue","description":"","frontmatter":{},"headers":[],"relativePath":"api/re/melange/Belt-MutableQueue.md","filePath":"api/re/melange/Belt-MutableQueue.md"}'),p={name:"api/re/melange/Belt-MutableQueue.md"},n=s('<h1 id="module-belt-mutablequeue" tabindex="-1">Module <code>Belt.MutableQueue</code> <a class="header-anchor" href="#module-belt-mutablequeue" aria-label="Permalink to &quot;Module `Belt.MutableQueue`&quot;">â€‹</a></h1><p><a href="#"><code>Belt.MutableQueue</code></a></p><p>An FIFO(first in first out) queue data structure</p><p>First-in first-out queues.</p><p>This module implements queues (FIFOs), with in-place modification.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>type t(&#39;a);</span></span></code></pre></div><p>The type of queues containing elements of type <code>&#39;a</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let make: unit =&gt; t(&#39;a);</span></span></code></pre></div><p>returns a new queue, initially empty.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let clear: t(&#39;a) =&gt; unit;</span></span></code></pre></div><p>Discard all elements from the queue.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let isEmpty: t(&#39;a) =&gt; bool;</span></span></code></pre></div><p>returns true if the given queue is empty, false otherwise.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let fromArray: array(&#39;a) =&gt; t(&#39;a);</span></span></code></pre></div><p><code>fromArray a</code> is equivalent to <code>Array.forEach a (add q a)</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let add: t(&#39;a) =&gt; &#39;a =&gt; unit;</span></span></code></pre></div><p><code>add q x</code> adds the element <code>x</code> at the end of the queue <code>q</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let peek: t(&#39;a) =&gt; option(&#39;a);</span></span></code></pre></div><p><code>peekOpt q</code> returns the first element in queue <code>q</code>, without removing it from the queue.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let peekUndefined: t(&#39;a) =&gt; Js.undefined(&#39;a);</span></span></code></pre></div><p><code>peekUndefined q</code> returns <code>undefined</code> if not found</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let peekExn: t(&#39;a) =&gt; &#39;a;</span></span></code></pre></div><p><code>peekExn q</code></p><p><strong>raise</strong> an exception if <code>q</code> is empty</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let pop: t(&#39;a) =&gt; option(&#39;a);</span></span></code></pre></div><p><code>pop q</code> removes and returns the first element in queue <code>q</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let popUndefined: t(&#39;a) =&gt; Js.undefined(&#39;a);</span></span></code></pre></div><p><code>popUndefined q</code> removes and returns the first element in queue <code>q</code>. it will return undefined if it is already empty</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let popExn: t(&#39;a) =&gt; &#39;a;</span></span></code></pre></div><p><code>popExn q</code></p><p><strong>raise</strong> an exception if <code>q</code> is empty</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let copy: t(&#39;a) =&gt; t(&#39;a);</span></span></code></pre></div><p><code>copy q</code></p><p>returns a fresh queue</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let size: t(&#39;a) =&gt; int;</span></span></code></pre></div><p>returns the number of elements in a queue.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let mapU: t(&#39;a) =&gt; Js.Fn.arity1((&#39;a =&gt; &#39;b)) =&gt; t(&#39;b);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let map: t(&#39;a) =&gt; (&#39;a =&gt; &#39;b) =&gt; t(&#39;b);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let forEachU: t(&#39;a) =&gt; Js.Fn.arity1((&#39;a =&gt; unit)) =&gt; unit;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let forEach: t(&#39;a) =&gt; (&#39;a =&gt; unit) =&gt; unit;</span></span></code></pre></div><p><code>forEach q f</code> applies <code>f</code> in turn to all elements of <code>q</code>, from the least recently entered to the most recently entered. The queue itself is unchanged.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let reduceU: t(&#39;a) =&gt; &#39;b =&gt; Js.Fn.arity2((&#39;b =&gt; &#39;a =&gt; &#39;b)) =&gt; &#39;b;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let reduce: t(&#39;a) =&gt; &#39;b =&gt; (&#39;b =&gt; &#39;a =&gt; &#39;b) =&gt; &#39;b;</span></span></code></pre></div><p><code>reduce q accu f</code> is equivalent to <code>List.reduce l accu f</code>, where <code>l</code> is the list of <code>q</code>&#39;s elements. The queue remains unchanged.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let transfer: t(&#39;a) =&gt; t(&#39;a) =&gt; unit;</span></span></code></pre></div><p><code>transfer q1 q2</code> adds all of <code>q1</code>&#39;s elements at the end of the queue <code>q2</code>, then clears <code>q1</code>. It is equivalent to the sequence <code>forEach (fun x -&gt; add x q2) q1; clear q1</code>, but runs in constant time.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let toArray: t(&#39;a) =&gt; array(&#39;a);</span></span></code></pre></div><p>First added will be in the beginning of the array</p>',48),i=[n];function o(l,c,d,u,h,g){return t(),a("div",null,i)}const v=e(p,[["render",o]]);export{b as __pageData,v as default};
