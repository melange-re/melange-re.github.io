import{_ as e,c as a,o as s,V as t}from"./chunks/framework.BCxdY_ip.js";const r=JSON.parse('{"title":"Module Belt.MutableSet","description":"","frontmatter":{},"headers":[],"relativePath":"api/re/melange/Belt-MutableSet.md","filePath":"api/re/melange/Belt-MutableSet.md"}'),i={name:"api/re/melange/Belt-MutableSet.md"},p=t(`<h1 id="module-belt-mutableset" tabindex="-1">Module <code>Belt.MutableSet</code> <a class="header-anchor" href="#module-belt-mutableset" aria-label="Permalink to &quot;Module \`Belt.MutableSet\`&quot;">â€‹</a></h1><p><a href="#"><code>Belt.MutableSet</code></a></p><p>The top level provides generic <strong>mutable</strong> set operations.</p><p>It also has two specialized inner modules <a href="./Belt-MutableSet-Int.html"><code>Belt.MutableSet.Int</code></a> and <a href="./Belt-MutableSet-String.html"><code>Belt.MutableSet.String</code></a></p><p>A <em>mutable</em> sorted set module which allows customize <em>compare</em> behavior.</p><p>Same as Belt.Set, but mutable.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>module Int: { ... };</span></span></code></pre></div><p>Specalized when key type is <code>int</code>, more efficient than the generic type</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>module String: { ... };</span></span></code></pre></div><p>Specalized when key type is <code>string</code>, more efficient than the generic type</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>type t(&#39;k, &#39;id);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>type id(&#39;k, &#39;id) =</span></span>
<span class="line"><span>  (module Belt__.Belt_Id.Comparable</span></span>
<span class="line"><span>  with type identity = &#39;id</span></span>
<span class="line"><span>   and type t = &#39;k);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let make: id:id(&#39;value, &#39;id) =&gt; t(&#39;value, &#39;id);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let fromArray: array(&#39;k) =&gt; id:id(&#39;k, &#39;id) =&gt; t(&#39;k, &#39;id);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let fromSortedArrayUnsafe: </span></span>
<span class="line"><span>  array(&#39;value) =&gt;</span></span>
<span class="line"><span>  id:id(&#39;value, &#39;id) =&gt;</span></span>
<span class="line"><span>  t(&#39;value, &#39;id);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let copy: t(&#39;k, &#39;id) =&gt; t(&#39;k, &#39;id);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let isEmpty: t(_, _) =&gt; bool;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let has: t(&#39;value, _) =&gt; &#39;value =&gt; bool;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let add: t(&#39;value, &#39;id) =&gt; &#39;value =&gt; unit;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let addCheck: t(&#39;value, &#39;id) =&gt; &#39;value =&gt; bool;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let mergeMany: t(&#39;value, &#39;id) =&gt; array(&#39;value) =&gt; unit;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let remove: t(&#39;value, &#39;id) =&gt; &#39;value =&gt; unit;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let removeCheck: t(&#39;value, &#39;id) =&gt; &#39;value =&gt; bool;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let removeMany: t(&#39;value, &#39;id) =&gt; array(&#39;value) =&gt; unit;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let union: t(&#39;value, &#39;id) =&gt; t(&#39;value, &#39;id) =&gt; t(&#39;value, &#39;id);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let intersect: t(&#39;value, &#39;id) =&gt; t(&#39;value, &#39;id) =&gt; t(&#39;value, &#39;id);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let diff: t(&#39;value, &#39;id) =&gt; t(&#39;value, &#39;id) =&gt; t(&#39;value, &#39;id);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let subset: t(&#39;value, &#39;id) =&gt; t(&#39;value, &#39;id) =&gt; bool;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let cmp: t(&#39;value, &#39;id) =&gt; t(&#39;value, &#39;id) =&gt; int;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let eq: t(&#39;value, &#39;id) =&gt; t(&#39;value, &#39;id) =&gt; bool;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let forEachU: t(&#39;value, &#39;id) =&gt; Js.Fn.arity1((&#39;value =&gt; unit)) =&gt; unit;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let forEach: t(&#39;value, &#39;id) =&gt; (&#39;value =&gt; unit) =&gt; unit;</span></span></code></pre></div><p><code>forEach m f</code> applies <code>f</code> in turn to all elements of <code>m</code>. In increasing order</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let reduceU: t(&#39;value, &#39;id) =&gt; &#39;a =&gt; Js.Fn.arity2((&#39;a =&gt; &#39;value =&gt; &#39;a)) =&gt; &#39;a;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let reduce: t(&#39;value, &#39;id) =&gt; &#39;a =&gt; (&#39;a =&gt; &#39;value =&gt; &#39;a) =&gt; &#39;a;</span></span></code></pre></div><p>In increasing order.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let everyU: t(&#39;value, &#39;id) =&gt; Js.Fn.arity1((&#39;value =&gt; bool)) =&gt; bool;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let every: t(&#39;value, &#39;id) =&gt; (&#39;value =&gt; bool) =&gt; bool;</span></span></code></pre></div><p><code>every s p</code> checks if all elements of the set satisfy the predicate <code>p</code>. Order unspecified</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let someU: t(&#39;value, &#39;id) =&gt; Js.Fn.arity1((&#39;value =&gt; bool)) =&gt; bool;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let some: t(&#39;value, &#39;id) =&gt; (&#39;value =&gt; bool) =&gt; bool;</span></span></code></pre></div><p><code>some p s</code> checks if at least one element of the set satisfies the predicate <code>p</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let keepU: t(&#39;value, &#39;id) =&gt; Js.Fn.arity1((&#39;value =&gt; bool)) =&gt; t(&#39;value, &#39;id);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let keep: t(&#39;value, &#39;id) =&gt; (&#39;value =&gt; bool) =&gt; t(&#39;value, &#39;id);</span></span></code></pre></div><p><code>keep s p</code> returns the set of all elements in <code>s</code> that satisfy predicate <code>p</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let partitionU: </span></span>
<span class="line"><span>  t(&#39;value, &#39;id) =&gt;</span></span>
<span class="line"><span>  Js.Fn.arity1((&#39;value =&gt; bool)) =&gt;</span></span>
<span class="line"><span>  (t(&#39;value, &#39;id), t(&#39;value, &#39;id));</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let partition: </span></span>
<span class="line"><span>  t(&#39;value, &#39;id) =&gt;</span></span>
<span class="line"><span>  (&#39;value =&gt; bool) =&gt;</span></span>
<span class="line"><span>  (t(&#39;value, &#39;id), t(&#39;value, &#39;id));</span></span></code></pre></div><p><code>partition p s</code> returns a pair of sets <code>(s1, s2)</code>, where <code>s1</code> is the set of all the elements of <code>s</code> that satisfy the predicate <code>p</code>, and <code>s2</code> is the set of all the elements of <code>s</code> that do not satisfy <code>p</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let size: t(&#39;value, &#39;id) =&gt; int;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let toList: t(&#39;value, &#39;id) =&gt; list(&#39;value);</span></span></code></pre></div><p>In increasing order</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let toArray: t(&#39;value, &#39;id) =&gt; array(&#39;value);</span></span></code></pre></div><p>In increasing order</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let minimum: t(&#39;value, &#39;id) =&gt; option(&#39;value);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let minUndefined: t(&#39;value, &#39;id) =&gt; Js.undefined(&#39;value);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let maximum: t(&#39;value, &#39;id) =&gt; option(&#39;value);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let maxUndefined: t(&#39;value, &#39;id) =&gt; Js.undefined(&#39;value);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let get: t(&#39;value, &#39;id) =&gt; &#39;value =&gt; option(&#39;value);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let getUndefined: t(&#39;value, &#39;id) =&gt; &#39;value =&gt; Js.undefined(&#39;value);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let getExn: t(&#39;value, &#39;id) =&gt; &#39;value =&gt; &#39;value;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let split: </span></span>
<span class="line"><span>  t(&#39;value, &#39;id) =&gt;</span></span>
<span class="line"><span>  &#39;value =&gt;</span></span>
<span class="line"><span>  ((t(&#39;value, &#39;id), t(&#39;value, &#39;id)), bool);</span></span></code></pre></div><p><code>split s x</code> returns a triple <code>((l, r), present)</code>, where <code>l</code> is the set of elements of <code>s</code> that are strictly less than <code>x</code>; <code>r</code> is the set of elements of <code>s</code> that are strictly greater than <code>x</code>; <code>present</code> is <code>false</code> if <code>s</code> contains no element equal to <code>x</code>, or <code>true</code> if <code>s</code> contains an element equal to <code>x</code>. <code>l,r</code> are freshly made, no sharing with <code>s</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let checkInvariantInternal: t(_, _) =&gt; unit;</span></span></code></pre></div><p><strong>raise</strong> when invariant is not held</p>`,64),l=[p];function n(o,d,c,g,h,u){return s(),a("div",null,l)}const b=e(i,[["render",n]]);export{r as __pageData,b as default};
