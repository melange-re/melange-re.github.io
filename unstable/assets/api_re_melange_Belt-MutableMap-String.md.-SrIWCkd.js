import{_ as a,c as e,o as s,V as t}from"./chunks/framework.BCxdY_ip.js";const v=JSON.parse('{"title":"Module MutableMap.String","description":"","frontmatter":{},"headers":[],"relativePath":"api/re/melange/Belt-MutableMap-String.md","filePath":"api/re/melange/Belt-MutableMap-String.md"}'),i={name:"api/re/melange/Belt-MutableMap-String.md"},p=t('<h1 id="module-mutablemap-string" tabindex="-1">Module <code>MutableMap.String</code> <a class="header-anchor" href="#module-mutablemap-string" aria-label="Permalink to &quot;Module `MutableMap.String`&quot;">â€‹</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>type key = string;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>type t(&#39;a);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let make: unit =&gt; t(&#39;a);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let clear: t(&#39;a) =&gt; unit;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let isEmpty: t(&#39;a) =&gt; bool;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let has: t(&#39;a) =&gt; key =&gt; bool;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let cmpU: t(&#39;a) =&gt; t(&#39;a) =&gt; Js.Fn.arity2((&#39;a =&gt; &#39;a =&gt; int)) =&gt; int;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let cmp: t(&#39;a) =&gt; t(&#39;a) =&gt; (&#39;a =&gt; &#39;a =&gt; int) =&gt; int;</span></span></code></pre></div><p><code>cmp m1 m2 cmp</code> First compare by size, if size is the same, compare by key, value pair</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let eqU: t(&#39;a) =&gt; t(&#39;a) =&gt; Js.Fn.arity2((&#39;a =&gt; &#39;a =&gt; bool)) =&gt; bool;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let eq: t(&#39;a) =&gt; t(&#39;a) =&gt; (&#39;a =&gt; &#39;a =&gt; bool) =&gt; bool;</span></span></code></pre></div><p><code>eq m1 m2 cmp</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let forEachU: t(&#39;a) =&gt; Js.Fn.arity2((key =&gt; &#39;a =&gt; unit)) =&gt; unit;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let forEach: t(&#39;a) =&gt; (key =&gt; &#39;a =&gt; unit) =&gt; unit;</span></span></code></pre></div><p><code>forEach m f</code> applies <code>f</code> to all bindings in map <code>m</code>. <code>f</code> receives the key as first argument, and the associated value as second argument. The application order of <code>f</code> is in increasing order.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let reduceU: t(&#39;a) =&gt; &#39;b =&gt; Js.Fn.arity3((&#39;b =&gt; key =&gt; &#39;a =&gt; &#39;b)) =&gt; &#39;b;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let reduce: t(&#39;a) =&gt; &#39;b =&gt; (&#39;b =&gt; key =&gt; &#39;a =&gt; &#39;b) =&gt; &#39;b;</span></span></code></pre></div><p><code>reduce m a f</code> computes <code>(f kN dN ... (f k1 d1 a)...)</code>, where <code>k1 ... kN</code> are the keys of all bindings in <code>m</code> (in increasing order), and <code>d1 ... dN</code> are the associated data.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let everyU: t(&#39;a) =&gt; Js.Fn.arity2((key =&gt; &#39;a =&gt; bool)) =&gt; bool;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let every: t(&#39;a) =&gt; (key =&gt; &#39;a =&gt; bool) =&gt; bool;</span></span></code></pre></div><p><code>every m p</code> checks if all the bindings of the map satisfy the predicate <code>p</code>. The application order of <code>p</code> is unspecified.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let someU: t(&#39;a) =&gt; Js.Fn.arity2((key =&gt; &#39;a =&gt; bool)) =&gt; bool;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let some: t(&#39;a) =&gt; (key =&gt; &#39;a =&gt; bool) =&gt; bool;</span></span></code></pre></div><p><code>some m p</code> checks if at least one binding of the map satisfy the predicate <code>p</code>. The application order of <code>p</code> is unspecified.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let size: t(&#39;a) =&gt; int;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let toList: t(&#39;a) =&gt; list((key, &#39;a));</span></span></code></pre></div><p>In increasing order</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let toArray: t(&#39;a) =&gt; array((key, &#39;a));</span></span></code></pre></div><p>In increasing order</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let fromArray: array((key, &#39;a)) =&gt; t(&#39;a);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let keysToArray: t(&#39;a) =&gt; array(key);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let valuesToArray: t(&#39;a) =&gt; array(&#39;a);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let minKey: t(_) =&gt; option(key);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let minKeyUndefined: t(_) =&gt; Js.undefined(key);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let maxKey: t(_) =&gt; option(key);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let maxKeyUndefined: t(_) =&gt; Js.undefined(key);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let minimum: t(&#39;a) =&gt; option((key, &#39;a));</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let minUndefined: t(&#39;a) =&gt; Js.undefined((key, &#39;a));</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let maximum: t(&#39;a) =&gt; option((key, &#39;a));</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let maxUndefined: t(&#39;a) =&gt; Js.undefined((key, &#39;a));</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let get: t(&#39;a) =&gt; key =&gt; option(&#39;a);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let getUndefined: t(&#39;a) =&gt; key =&gt; Js.undefined(&#39;a);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let getWithDefault: t(&#39;a) =&gt; key =&gt; &#39;a =&gt; &#39;a;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let getExn: t(&#39;a) =&gt; key =&gt; &#39;a;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let checkInvariantInternal: t(_) =&gt; unit;</span></span></code></pre></div><p><strong>raise</strong> when invariant is not held</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let remove: t(&#39;a) =&gt; key =&gt; unit;</span></span></code></pre></div><p><code>remove m x</code> do the in-place modification</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let removeMany: t(&#39;a) =&gt; array(key) =&gt; unit;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let set: t(&#39;a) =&gt; key =&gt; &#39;a =&gt; unit;</span></span></code></pre></div><p><code>set m x y</code> do the in-place modification, return <code>m</code> for chaining. If <code>x</code> was already bound in <code>m</code>, its previous binding disappears.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let updateU: t(&#39;a) =&gt; key =&gt; Js.Fn.arity1((option(&#39;a) =&gt; option(&#39;a))) =&gt; unit;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let update: t(&#39;a) =&gt; key =&gt; (option(&#39;a) =&gt; option(&#39;a)) =&gt; unit;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let mapU: t(&#39;a) =&gt; Js.Fn.arity1((&#39;a =&gt; &#39;b)) =&gt; t(&#39;b);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let map: t(&#39;a) =&gt; (&#39;a =&gt; &#39;b) =&gt; t(&#39;b);</span></span></code></pre></div><p><code>map m f</code> returns a map with same domain as <code>m</code>, where the associated value <code>a</code> of all bindings of <code>m</code> has been replaced by the result of the application of <code>f</code> to <code>a</code>. The bindings are passed to <code>f</code> in increasing order with respect to the ordering over the type of the keys.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let mapWithKeyU: t(&#39;a) =&gt; Js.Fn.arity2((key =&gt; &#39;a =&gt; &#39;b)) =&gt; t(&#39;b);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let mapWithKey: t(&#39;a) =&gt; (key =&gt; &#39;a =&gt; &#39;b) =&gt; t(&#39;b);</span></span></code></pre></div>',59),n=[p];function l(o,c,d,g,h,u){return s(),e("div",null,n)}const b=a(i,[["render",l]]);export{v as __pageData,b as default};
