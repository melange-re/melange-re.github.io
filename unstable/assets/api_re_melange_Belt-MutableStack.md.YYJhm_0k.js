import{_ as a,c as t,o as e,V as s}from"./chunks/framework.BCxdY_ip.js";const b=JSON.parse('{"title":"Module Belt.MutableStack","description":"","frontmatter":{},"headers":[],"relativePath":"api/re/melange/Belt-MutableStack.md","filePath":"api/re/melange/Belt-MutableStack.md"}'),p={name:"api/re/melange/Belt-MutableStack.md"},i=s('<h1 id="module-belt-mutablestack" tabindex="-1">Module <code>Belt.MutableStack</code> <a class="header-anchor" href="#module-belt-mutablestack" aria-label="Permalink to &quot;Module `Belt.MutableStack`&quot;">â€‹</a></h1><p><a href="#"><code>Belt.MutableStack</code></a></p><p>An FILO(first in last out) stack data structure</p><p>First in last out stack.</p><p>This module implements stacks, with in-place modification.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>type t(&#39;a);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let make: unit =&gt; t(&#39;a);</span></span></code></pre></div><p>returns a new stack, initially empty.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let clear: t(&#39;a) =&gt; unit;</span></span></code></pre></div><p>Discard all elements from the stack.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let copy: t(&#39;a) =&gt; t(&#39;a);</span></span></code></pre></div><p><code>copy x</code> O(1) operation, return a new stack</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let push: t(&#39;a) =&gt; &#39;a =&gt; unit;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let popUndefined: t(&#39;a) =&gt; Js.undefined(&#39;a);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let pop: t(&#39;a) =&gt; option(&#39;a);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let topUndefined: t(&#39;a) =&gt; Js.undefined(&#39;a);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let top: t(&#39;a) =&gt; option(&#39;a);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let isEmpty: t(&#39;a) =&gt; bool;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let size: t(&#39;a) =&gt; int;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let forEachU: t(&#39;a) =&gt; Js.Fn.arity1((&#39;a =&gt; unit)) =&gt; unit;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let forEach: t(&#39;a) =&gt; (&#39;a =&gt; unit) =&gt; unit;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let dynamicPopIterU: t(&#39;a) =&gt; Js.Fn.arity1((&#39;a =&gt; unit)) =&gt; unit;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let dynamicPopIter: t(&#39;a) =&gt; (&#39;a =&gt; unit) =&gt; unit;</span></span></code></pre></div><p><code>dynamicPopIter s f </code> apply <code>f</code> to each element of <code>s</code>. The item is poped before applying <code>f</code>, <code>s</code> will be empty after this opeartion. This function is useful for worklist algorithm</p>',24),n=[i];function l(c,o,d,h,u,g){return e(),t("div",null,n)}const v=a(p,[["render",l]]);export{b as __pageData,v as default};
