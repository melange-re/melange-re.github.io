import{_ as e,c as s,o as i,V as a}from"./chunks/framework.BCxdY_ip.js";const u=JSON.parse('{"title":"How-to guides","description":"","frontmatter":{},"headers":[],"relativePath":"how-to-guides.md","filePath":"how-to-guides.md"}'),n={name:"how-to-guides.md"},t=a(`<h1 id="how-to-guides" tabindex="-1">How-to guides <a class="header-anchor" href="#how-to-guides" aria-label="Permalink to &quot;How-to guides&quot;">​</a></h1><h2 id="migrate-a-rescript-library-to-melange" tabindex="-1">Migrate a ReScript library to Melange <a class="header-anchor" href="#migrate-a-rescript-library-to-melange" aria-label="Permalink to &quot;Migrate a ReScript library to Melange&quot;">​</a></h2><p>It is possible to use existing <a href="https://rescript-lang.org/" target="_blank" rel="noreferrer">ReScript</a> (formerly BuckleScript) code with Melange, mostly as is. However, as both projects evolve in different directions over time, it will become more challenging to do so as time goes by, as some of the most recent features of ReScript might not be directly convertible to make them work with Melange.</p><p>For this reason, the recommendation is to migrate libraries at a time where they were compatible with past versions of ReScript, for example v9 (or v10 at most).</p><p>These are the steps to follow:</p><ul><li>Add an <code>opam</code> file</li><li>Add a <code>dune-project</code> file</li><li>Replace the <code>bsconfig.json</code> file with one or multiple <code>dune</code> files</li><li>(Optional) Migrate from ReScript syntax to Reason or OCaml syntaxes</li><li>Make sure everything works: <code>dune build</code></li><li>Final step: remove <code>bsconfig.json</code> and adapt <code>package.json</code></li></ul><p>Let&#39;s go through them in detail:</p><h3 id="add-an-opam-file" tabindex="-1">Add an <code>opam</code> file <a class="header-anchor" href="#add-an-opam-file" aria-label="Permalink to &quot;Add an \`opam\` file&quot;">​</a></h3><p>To migrate your ReScript library to Melange, you will need some packages. Melange is designed to be used with <a href="https://opam.ocaml.org/" target="_blank" rel="noreferrer">opam</a>, the package manager of OCaml, which is explained in <a href="./package-management.html">its own section</a>.</p><p>To get started with the library migration, let&#39;s create an <code>opam</code> file in your library&#39;s root folder with the minimum set of packages to start working:</p><div class="language-opam vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">opam</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">opam-version</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;2.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">synopsis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;My Melange library&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">description</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;A library for Melange&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">maintainer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;your_name&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">authors</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;your_name&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">license</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;XXX&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">homepage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://github.com/your/project&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">bug-reports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://github.com/your/project/issues&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">depends</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;ocaml&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;dune&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;melange&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dev-repo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;git+https://github.com/your/project.git&quot;</span></span></code></pre></div><p>If your library was using <a href="https://reasonml.github.io/en/" target="_blank" rel="noreferrer">Reason syntax</a> (<code>re</code> files), you will need to add <code>&quot;reason&quot;</code> to the list of dependencies. If the library was using ReScript syntax (<code>res</code> files), you will need to add <code>rescript-syntax</code> to the list of dependencies. You can read more about how to migrate from ReScript syntax in the section below.</p><p>At this point, we can create a <a href="https://opam.ocaml.org/blog/opam-local-switches/" target="_blank" rel="noreferrer">local opam switch</a> to start working on our library:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">opam</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> switch create . </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.0 -y --deps-only</span></span></code></pre></div><p>Once this step is done, we can call <code>dune</code> from the library folder, but first we need some configuration files.</p><h3 id="add-a-dune-project-file" tabindex="-1">Add a <code>dune-project</code> file <a class="header-anchor" href="#add-a-dune-project-file" aria-label="Permalink to &quot;Add a \`dune-project\` file&quot;">​</a></h3><p>Create a file named <code>dune-project</code> in the library root folder. This file will tell Dune a few things about our project configuration:</p><div class="language-dune vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dune</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lang dune </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> melange </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="replace-the-bsconfig-json-file-with-one-or-multiple-dune-files" tabindex="-1">Replace the <code>bsconfig.json</code> file with one or multiple <code>dune</code> files <a class="header-anchor" href="#replace-the-bsconfig-json-file-with-one-or-multiple-dune-files" aria-label="Permalink to &quot;Replace the \`bsconfig.json\` file with one or multiple \`dune\` files&quot;">​</a></h3><p>Now, we need to add a <code>dune</code> file where we will tell Dune about our library. You can put this new file next to the library sources, it will look something like this:</p><div class="language-dune vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dune</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">library</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> things)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">modes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> melange)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">preprocess</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> melange.ppx)))</span></span></code></pre></div><p>Let&#39;s see how the most common configurations in <code>bsconfig.json</code> (or <code>rescript.json</code>) map to <code>dune</code> files. You can find more information about these configurations in the <a href="https://rescript-lang.org/docs/manual/latest/build-configuration" target="_blank" rel="noreferrer">Rescript docs</a> and in the <a href="https://dune.readthedocs.io/en/stable/reference/dune/library.html" target="_blank" rel="noreferrer">Dune docs</a>.</p><h4 id="name-namespace" tabindex="-1"><code>name</code>, <code>namespace</code> <a class="header-anchor" href="#name-namespace" aria-label="Permalink to &quot;\`name\`, \`namespace\`&quot;">​</a></h4><p>These two configurations map to Dune <code>(wrapped &lt;boolean&gt;)</code> field in the <code>library</code> stanza. By default, all Dune libraries are wrapped, which means that a single module with the name of the library is exposed at the top level. So e.g. of your <code>bsconfig.json</code> had <code>&quot;namespace&quot;: false</code>, you can add <code>(wrapped false)</code> to your library, although wrapped libraries are heavily encouraged to avoid global namespace pollution.</p><p>It&#39;s important to note that the permissible character range for naming conventions differs between ReScript namespaces and Dune libraries. Dune library names must adhere to the naming criteria set for OCaml modules. For instance, if your <code>bsconfig.json</code> configuration includes a naming scheme like this:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;namespace&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo-bar&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>It should be converted into something like:</p><div class="language-dune vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dune</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">library</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fooBar) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">; or (name foo_bar)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">modes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> melange)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">preprocess</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> melange.ppx)))</span></span></code></pre></div><h4 id="sources" tabindex="-1"><code>sources</code> <a class="header-anchor" href="#sources" aria-label="Permalink to &quot;\`sources\`&quot;">​</a></h4><p>Dune works slightly differently than ReScript when it comes down to including source folders as part of a library.</p><p>By default, when Dune finds a <code>dune</code> file with a <code>library</code> stanza, it will include just the files inside that folder to the library itself (unless the <code>modules</code> field is used). If you want to create a library with multiple subfolders in it, you can use the following combination of stanzas:</p><ul><li><code>(include_subdirs unqualified)</code> (<a href="https://dune.readthedocs.io/en/stable/reference/dune/include_subdirs.html" target="_blank" rel="noreferrer">docs</a>): This stanza tells Dune to look for sources in all the subfolders of the folder where the <code>dune</code> file lives.</li><li><code>(dirs foo bar)</code> (<a href="https://dune.readthedocs.io/en/stable/reference/dune/dirs.html" target="_blank" rel="noreferrer">docs</a>): This stanza tells Dune to only look into <code>foo</code> and <code>bar</code> subdirectories of the current folder.</li></ul><p>So for example, if your library had this configuration in its <code>bsconfig.json</code>:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;sources&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;helper&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>You might translate this to a <code>dune</code> file with the following configuration:</p><div class="language-dune vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dune</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">include_subdirs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> unqualified)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">dirs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> src helper)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">library</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> things)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">modes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> melange)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">preprocess</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> melange.ppx)))</span></span></code></pre></div><p>Alternatively, depending on the case, you could place two separate <code>dune</code> files, one in <code>src</code> and one in <code>helper</code>, and define one <code>library</code> on each. In that case, <code>include_subdirs</code> and <code>dirs</code> would not be necessary.</p><p>Regarding the <code>&quot;type&quot; : &quot;dev&quot;</code> configuration in ReScript, the way Dune solves that is with public and private libraries. If a <code>library</code> stanza includes a <code>public_name</code> field, it becomes a public library, and will be installed. Otherwise it is private and won&#39;t be visible by consumers of the package.</p><h4 id="bs-dependencies" tabindex="-1"><code>bs-dependencies</code> <a class="header-anchor" href="#bs-dependencies" aria-label="Permalink to &quot;\`bs-dependencies\`&quot;">​</a></h4><p>Your library might depend on other libraries. To specify dependencies of the library in the <code>dune</code> file, you can use the <code>libraries</code> field of the <code>library</code> stanza.</p><p>For example, if <code>bsconfig.json</code> had something like this:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bs-dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;reason-react&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p>Your <code>dune</code> file will look something like:</p><div class="language-dune vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dune</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">library</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> things)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">libraries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reason-react)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">modes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> melange)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">preprocess</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> melange.ppx)))</span></span></code></pre></div><p>Remember that you will have to add all dependencies to your library <code>opam</code> package as well.</p><h4 id="bs-dev-dependencies" tabindex="-1"><code>bs-dev-dependencies</code> <a class="header-anchor" href="#bs-dev-dependencies" aria-label="Permalink to &quot;\`bs-dev-dependencies\`&quot;">​</a></h4><p>Most of the times, <code>bs-dev-dependencies</code> is used to define dependencies required for testing. For this scenario, opam provides the <code>with-test</code> variable.</p><p>Supposing we want to add <code>melange-jest</code> as a dependency to use for tests, you could add this in your library <code>opam</code> file:</p><div class="language-opam vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">opam</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">depends</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;melange-jest&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">with-test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p>The packages marked with this variable <a href="https://opam.ocaml.org/doc/Manual.html#opamfield-depends" target="_blank" rel="noreferrer">become dependencies</a> when <code>opam install</code> is called with the <code>--with-test</code> flag.</p><p>Once the library <code>melange-jest</code> has been installed by opam, it is available in Dune, so adding <code>(libraries melange-jest)</code> to your <code>library</code> or <code>melange.emit</code> stanzas would be enough to start using it.</p><h4 id="pinned-dependencies" tabindex="-1"><code>pinned-dependencies</code> <a class="header-anchor" href="#pinned-dependencies" aria-label="Permalink to &quot;\`pinned-dependencies\`&quot;">​</a></h4><p>Dune allows to work inside monorepos naturally, so there is no need for pinned dependencies. <a href="https://dune.readthedocs.io/en/stable/reference/packages.html" target="_blank" rel="noreferrer">Packages</a> can be defined in the <code>dune-project</code> file using the <code>packages</code> stanza, and multiple <code>dune-project</code> files can be added across a single codebase to work in a monorepo setup.</p><h4 id="external-stdlib" tabindex="-1"><code>external-stdlib</code> <a class="header-anchor" href="#external-stdlib" aria-label="Permalink to &quot;\`external-stdlib\`&quot;">​</a></h4><p>There is no direct mapping of this functionality in Melange. If you are interested in it, or have a use case for it, please share with us on <a href="https://github.com/melange-re/melange/issues/620" target="_blank" rel="noreferrer">issue melange-re/melange#620</a>.</p><h4 id="js-post-build" tabindex="-1"><code>js-post-build</code> <a class="header-anchor" href="#js-post-build" aria-label="Permalink to &quot;\`js-post-build\`&quot;">​</a></h4><p>You can use Dune rules to perform actions, that produce some targets, given some dependencies.</p><p>For example, if you had something like this in <code>bsconfig.json</code>:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;js-post-build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;cmd&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node ../../postProcessTheFile.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>This could be expressed in a <code>dune</code> file with something like:</p><div class="language-dune vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dune</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">rule</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">deps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> melange))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> node ../../postProcessTheFile.js)))</span></span></code></pre></div><p>To read more about Dune rules, check <a href="https://dune.readthedocs.io/en/stable/reference/dune/rule.html" target="_blank" rel="noreferrer">the documentation</a>.</p><h4 id="package-specs" tabindex="-1"><code>package-specs</code> <a class="header-anchor" href="#package-specs" aria-label="Permalink to &quot;\`package-specs\`&quot;">​</a></h4><p>This setting is not configured at the library level, but rather at the application level, using the <code>module_systems</code> field in the <code>melange.emit</code> stanza. To read more about it, check the corresponding <a href="./build-system.html#commonjs-or-es6-modules">build system</a> section.</p><p>Regarding the <code>&quot;in-source&quot;</code> configuration, the corresponding field in Dune would be the <code>(promote (until-clean))</code> configuration, which can be added to a <code>melange.emit</code> stanza. You can read more about it in <a href="https://dune.readthedocs.io/en/stable/reference/dune/rule.html#promote" target="_blank" rel="noreferrer">the Dune documentation</a>.</p><h4 id="suffix" tabindex="-1"><code>suffix</code> <a class="header-anchor" href="#suffix" aria-label="Permalink to &quot;\`suffix\`&quot;">​</a></h4><p>Same as with <code>package-specs</code> this configuration is set at the application level, using the <code>module_systems</code> field in the <code>melange.emit</code> stanza. Check the <a href="./build-system.html#commonjs-or-es6-modules">CommonJS or ES6 modules</a> section to learn more about it.</p><h4 id="warnings-and-bsc-flags" tabindex="-1"><code>warnings</code> and <code>bsc-flags</code> <a class="header-anchor" href="#warnings-and-bsc-flags" aria-label="Permalink to &quot;\`warnings\` and \`bsc-flags\`&quot;">​</a></h4><p>You can use the <a href="https://dune.readthedocs.io/en/stable/concepts/ocaml-flags.html" target="_blank" rel="noreferrer"><code>flags</code> field</a> of the <code>library</code> stanza to define flags to pass to Melange compiler.</p><p>If you want to define flags only for Melange, you can use <code>melange.compile_flags</code>.</p><p>For example, if you had a <code>bsconfig.json</code> configuration like this:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;warnings&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;number&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-44-102&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;+5&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>You can define a similar configuration in your library <code>dune</code> file like this:</p><div class="language-dune vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dune</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">library</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> things)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">modes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> melange)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">preprocess</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> melange.ppx))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">melange.compile_flags</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :standard</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -w +5-44-102))</span></span></code></pre></div><p>The same applies to <code>bsc-flags</code>.</p><h3 id="optional-migrate-from-rescript-syntax-to-reason-or-ocaml-syntax" tabindex="-1">(Optional) Migrate from ReScript syntax to Reason or OCaml syntax <a class="header-anchor" href="#optional-migrate-from-rescript-syntax-to-reason-or-ocaml-syntax" aria-label="Permalink to &quot;(Optional) Migrate from ReScript syntax to Reason or OCaml syntax&quot;">​</a></h3><p>The package <code>rescript-syntax</code> allows to translate <code>res</code> source files to <code>ml</code>.</p><p>To use this package, we need to install it first:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">opam</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install rescript-syntax</span></span></code></pre></div><blockquote><p>Note that the <code>rescript-syntax</code> package is only compatible with the version 1 of <code>melange</code>, so if you are using a more recent version of <code>melange</code>, you might need to downgrade it before installing <code>rescript-syntax</code>.</p></blockquote><p>To convert a <code>res</code> file to <code>ml</code> syntax:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rescript_syntax</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myFile.res -print ml</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myFile.ml</span></span></code></pre></div><p>You can use this command in combination with <code>find</code> to convert multiple files at once:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src1 src2 -type f -name &quot;*.res&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -exec</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echo &quot;rescript_syntax {} -print ml&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\;</span></span></code></pre></div><p>If you want to convert the files to Reason syntax (<code>re</code>), you can pipe the output of each file to <code>refmt</code>.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rescript_syntax</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./myFile.res -print ml </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> refmt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --parse=ml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --print</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> re</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myFile.re</span></span></code></pre></div><p>Note that <code>refmt</code> is available in the <code>reason</code> package, so if your library modules are written using Reason syntax, remember to install it first using <code>opam install reason</code> before performing the conversion, and also adding it to your library <code>opam</code> file as well.</p><h3 id="make-sure-everything-works-dune-build" tabindex="-1">Make sure everything works: <code>dune build</code> <a class="header-anchor" href="#make-sure-everything-works-dune-build" aria-label="Permalink to &quot;Make sure everything works: \`dune build\`&quot;">​</a></h3><p>Once you have performed the above steps, you can test that everything works by running</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dune</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div><p>Throughout the process, you might run into some errors, these are the most common ones:</p><h4 id="warning-16-unerasable-opt-argument-is-triggered-more-often-than-before" tabindex="-1">Warning 16 [unerasable-opt-argument] is triggered more often than before <a class="header-anchor" href="#warning-16-unerasable-opt-argument-is-triggered-more-often-than-before" aria-label="Permalink to &quot;Warning 16 [unerasable-opt-argument] is triggered more often than before&quot;">​</a></h4><p>Melange triggers <code>Warning 16: this optional argument cannot be erased</code> more often than before, as the type system in OCaml 4.12 was improved. You can read more about this in this <a href="https://github.com/ocaml/ocaml/pull/9783" target="_blank" rel="noreferrer">OCaml PR</a>.</p><p><strong>Fix</strong>: either add <code>()</code> as final param of the function, or replace one labelled arg with a positional one.</p><h4 id="warning-69-unused-field-triggered-from-bindings-types" tabindex="-1">Warning 69 [unused-field] triggered from bindings types <a class="header-anchor" href="#warning-69-unused-field-triggered-from-bindings-types" aria-label="Permalink to &quot;Warning 69 [unused-field] triggered from bindings types&quot;">​</a></h4><p>Sometimes, types for bindings will trigger <code>Warning 69 [unused-field]: record field foo is never read.</code> errors.</p><p><strong>Fix</strong>: silence the warning in the type definition, e.g.</p><div class="language-ocaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ocaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> renderOptions </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@@warning</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;-69&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><h4 id="destructuring-order-is-changed" tabindex="-1">Destructuring order is changed <a class="header-anchor" href="#destructuring-order-is-changed" aria-label="Permalink to &quot;Destructuring order is changed&quot;">​</a></h4><p>Destructuring in <code>let</code> patterns in Melange is done on the left side first, while on ReScript is done on the right side first. You can read more in the <a href="https://github.com/melange-re/melange/pull/161" target="_blank" rel="noreferrer">Melange PR</a> with the explanation.</p><p><strong>Fix</strong>: move module namespacing to the left side of the <code>let</code> expressions.</p><h4 id="pervasives-is-deprecated" tabindex="-1"><code>Pervasives</code> is deprecated <a class="header-anchor" href="#pervasives-is-deprecated" aria-label="Permalink to &quot;\`Pervasives\` is deprecated&quot;">​</a></h4><p>This is also another change due to OCaml compiler moving forward.</p><p><strong>Fix</strong>: Use <code>Stdlib</code> instead.</p><h4 id="runtime-assets-are-missing" tabindex="-1">Runtime assets are missing <a class="header-anchor" href="#runtime-assets-are-missing" aria-label="Permalink to &quot;Runtime assets are missing&quot;">​</a></h4><p>In ReScript, building in source is very common. In Melange and Dune, the most common setup is having all artifacts inside the <code>_build</code> folder. If your library is using some asset such as:</p><div class="language-ocaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ocaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myImage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;default&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@@bs.module</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./icons/overview.svg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p><strong>Fix</strong>: You can include it by using the <code>melange.runtime_deps</code> field of the library:</p><div class="language-dune vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dune</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">library</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> things)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">modes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> melange)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">preprocess</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> melange.ppx))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">melange.runtime_deps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> icons/overview.svg))</span></span></code></pre></div><p>You can read more about this in the <a href="./build-system.html#handling-assets">Handling assets</a> section.</p><h3 id="final-step-remove-bsconfig-json-and-adapt-package-json" tabindex="-1">Final step: remove <code>bsconfig.json</code> and adapt <code>package.json</code> <a class="header-anchor" href="#final-step-remove-bsconfig-json-and-adapt-package-json" aria-label="Permalink to &quot;Final step: remove \`bsconfig.json\` and adapt \`package.json\`&quot;">​</a></h3><p>If everything went well, you can remove the <code>bsconfig.json</code> file, and remove any dependencies needed by Melange from the <code>package.json</code>, as they will be appearing in the <code>opam</code> file instead, as it was mentioned in the <a href="#bs-dependencies"><code>bs-dependencies</code> section</a>.</p><h2 id="migrate" tabindex="-1">Migrate <a class="header-anchor" href="#migrate" aria-label="Permalink to &quot;Migrate&quot;">​</a></h2><p>This section contains information about migrating from older versions of Melange to newer ones.</p><h3 id="to-v2-from-v1" tabindex="-1">To v2 from v1 <a class="header-anchor" href="#to-v2-from-v1" aria-label="Permalink to &quot;To v2 from v1&quot;">​</a></h3><p>Melange v2 is only compatible with OCaml 5.1. In order to upgrade, let&#39;s update the local opam switch first, to make sure the local repository gets the versions v2 of Melange and 5.1 of OCaml:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">opam</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span></code></pre></div><p>Now, update the version of the OCaml compiler in the local switch to 5.1:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">opam</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install --update-invariant ocaml-base-compiler.5.3.0</span></span></code></pre></div><p>Finally, we can upgrade all packages to get Melange v2 and the latest version of all libraries:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">opam</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upgrade</span></span></code></pre></div><p>To make sure you have the latest version of Melange, you can use the <code>opam list</code> subcommand:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">opam</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list --installed melange</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Packages matching: name-match(melange) &amp; installed</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Name  # Installed    # Synopsis</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">melange</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5.0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.0-53       Toolchain to produce JS from Reason/OCaml</span></span></code></pre></div><p>Before building, we have to update some parts of the configuration to make it work with v2.</p><h4 id="melange-ppx-now-includes-most-syntax-transformations" tabindex="-1"><code>melange.ppx</code> now includes most syntax transformations <a class="header-anchor" href="#melange-ppx-now-includes-most-syntax-transformations" aria-label="Permalink to &quot;\`melange.ppx\` now includes most syntax transformations&quot;">​</a></h4><p>Most of the attributes used to write bindings are now handled by <code>melange.ppx</code>. If you get errors of the kind <code>Unused attribute</code>, or type errors in externals that don&#39;t make much sense, then you probably need to add <code>melange.ppx</code> to your <code>library</code> or <code> melange.emit</code> stanzas.</p><div class="language-dune vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dune</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">library</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">preprocess</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> melange.ppx)))</span></span></code></pre></div><h4 id="warnings-have-been-turned-into-alerts" tabindex="-1">Warnings have been turned into alerts <a class="header-anchor" href="#warnings-have-been-turned-into-alerts" aria-label="Permalink to &quot;Warnings have been turned into alerts&quot;">​</a></h4><p>Some warnings were turned into alerts, so they might be visible even if using <code>vendored_dirs</code>. To silence these alerts, either fix the root cause or silence them using <code>(preprocess (pps melange.ppx -alert -deprecated))</code>.</p><h4 id="wrapped-libraries" tabindex="-1">Wrapped libraries <a class="header-anchor" href="#wrapped-libraries" aria-label="Permalink to &quot;Wrapped libraries&quot;">​</a></h4><p>Melange libraries like Belt and Js are now wrapped, so the access to modules inside them need to be adapted. Some examples:</p><ul><li><code>Js_string</code> needs to be replaced with <code>Js.String</code></li><li><code>Belt_MapInt</code> is now <code>Belt.Map.Int</code></li></ul><h4 id="changes-in-deriving" tabindex="-1">Changes in <code>deriving</code> <a class="header-anchor" href="#changes-in-deriving" aria-label="Permalink to &quot;Changes in \`deriving\`&quot;">​</a></h4><p>The <code>bs.deriving</code> attribute is replaced with <code>deriving</code>. Also, the payload taken by this attribute has been adapted to conform to ppxlib requirements. Note that <code>mel.deriving</code> is not accepted.</p><p>Let&#39;s see how the payload has changed in both OCaml and Reason syntaxes.</p><p>In Ocaml syntax:</p><table><thead><tr><th>Before</th><th>After</th></tr></thead><tbody><tr><td><code>[@@bs.deriving { jsConverter = newType }]</code></td><td><code>[@@deriving jsConverter { newType } ]</code></td></tr><tr><td><code>[@@bs.deriving { abstract = light }]</code></td><td><code>[@@deriving abstract { light }]</code></td></tr></tbody></table><p>In Reason syntax:</p><table><thead><tr><th>Before</th><th>After</th></tr></thead><tbody><tr><td><code>[@bs.deriving {jsConverter: newType}]</code></td><td><code>[@deriving jsConverter({newType: newType})]</code></td></tr><tr><td><code>[@bs.deriving {abstract: light}]</code></td><td><code>[@deriving abstract({light: light})]</code></td></tr></tbody></table><h4 id="bs-attributes-and-extensions-become-mel" tabindex="-1"><code>bs.*</code> attributes and extensions become <code>mel.*</code> <a class="header-anchor" href="#bs-attributes-and-extensions-become-mel" aria-label="Permalink to &quot;\`bs.*\` attributes and extensions become \`mel.*\`&quot;">​</a></h4><p>All attributes or extension nodes prefixed with <code>bs</code> are now prefixed with <code>mel</code> instead.</p><p>For example <code>@bs.as</code> becomes <code>@mel.as</code>, and <code>%bs.raw</code> becomes <code>%mel.raw</code>.</p><p>Note that attributes in the deprecated form (<code>@bs.*</code>) are still accepted until v3, but node extensions (<code>%bs.*</code>) are not.</p><h4 id="bs-attribute-becomes-u" tabindex="-1"><code>@bs</code> attribute becomes <code>@u</code> <a class="header-anchor" href="#bs-attribute-becomes-u" aria-label="Permalink to &quot;\`@bs\` attribute becomes \`@u\`&quot;">​</a></h4><p>The <code>@bs</code> attribute, used for uncurried application (see the <a href="./working-with-js-objects-and-values.html#binding-to-callbacks">&quot;Binding to callbacks&quot; section</a>), becomes <code>@u</code>.</p><h4 id="bs-val-is-gone" tabindex="-1"><code>@bs.val</code> is gone <a class="header-anchor" href="#bs-val-is-gone" aria-label="Permalink to &quot;\`@bs.val\` is gone&quot;">​</a></h4><p>The <code>@bs.val</code> attribute is no longer necessary, and can be removed from <code>external</code> definitions. See more information in the <a href="./working-with-js-objects-and-values.html#using-global-functions-or-values">&quot;Using global functions or values&quot;</a> section.</p><h4 id="dom-and-node-are-in-their-own-libraries" tabindex="-1"><code>Dom</code> and <code>Node</code> are in their own libraries <a class="header-anchor" href="#dom-and-node-are-in-their-own-libraries" aria-label="Permalink to &quot;\`Dom\` and \`Node\` are in their own libraries&quot;">​</a></h4><p>The namespaces <code>Dom</code> and <code>Node</code> are now in the libraries <code>melange.dom</code> and <code>melange.node</code> respectively. These libraries are not included by default by Melange, and will need to be added to the <code>libraries</code> field explicitly.</p><h4 id="effect-handlers" tabindex="-1">Effect handlers <a class="header-anchor" href="#effect-handlers" aria-label="Permalink to &quot;Effect handlers&quot;">​</a></h4><p>Although Melange v2 requires OCaml 5.1, it doesn&#39;t yet provide a good solution for compiling effect handlers to JavaScript. Until it does, they are disabled at the compiler level, and their APIs are not accessible.</p>`,151),l=[t];function o(h,r,p,d,c,k){return i(),s("div",null,l)}const m=e(n,[["render",o]]);export{u as __pageData,m as default};
