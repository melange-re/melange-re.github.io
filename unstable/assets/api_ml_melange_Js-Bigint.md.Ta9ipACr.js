import{_ as s,c as a,o as e,V as t}from"./chunks/framework.BCxdY_ip.js";const v=JSON.parse('{"title":"Module Js.Bigint","description":"","frontmatter":{},"headers":[],"relativePath":"api/ml/melange/Js-Bigint.md","filePath":"api/ml/melange/Js-Bigint.md"}'),i={name:"api/ml/melange/Js-Bigint.md"},n=t(`<h1 id="module-js-bigint" tabindex="-1">Module <code>Js.Bigint</code> <a class="header-anchor" href="#module-js-bigint" aria-label="Permalink to &quot;Module \`Js.Bigint\`&quot;">â€‹</a></h1><p>Bindings to functions in JavaScript&#39;s <code>BigInt</code></p><p>JavaScript BigInt API</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>type t = Js.bigint</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val make : &#39;a -&gt; t</span></span></code></pre></div><p><code>make repr</code> creates a new BigInt from the representation <code>repr</code>. <code>repr</code> can be a number, a string, boolean, etc.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val asIntN : precision:int -&gt; t -&gt; t</span></span></code></pre></div><p><code>asIntN ~precision bigint</code> truncates the BigInt value of <code>bigint</code> to the given number of least significant bits specified by <code>precision</code> and returns that value as a signed integer.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val asUintN : precision:int -&gt; t -&gt; t</span></span></code></pre></div><p><code>asUintN ~precision bigint</code> truncates the BigInt value of <code>bigint</code> to the given number of least significant bits specified by <code>precision</code> and returns that value as an unsigned integer.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>type toLocaleStringOptions = {</span></span></code></pre></div><p><code>style : string;</code><code>currency : string;</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>}</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val toLocaleString : </span></span>
<span class="line"><span>  locale:string -&gt;</span></span>
<span class="line"><span>  ?options:toLocaleStringOptions -&gt;</span></span>
<span class="line"><span>  t -&gt;</span></span>
<span class="line"><span>  string</span></span></code></pre></div><p><code>toLocaleString bigint</code> returns a string with a language-sensitive representation of this BigInt.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val toString : t -&gt; string</span></span></code></pre></div><p><code>toString bigint</code> returns a string representing the specified BigInt value.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val neg : t -&gt; t</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val add : t -&gt; t -&gt; t</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val sub : t -&gt; t -&gt; t</span></span></code></pre></div><p>Subtraction.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val mul : t -&gt; t -&gt; t</span></span></code></pre></div><p>Multiplication.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val div : t -&gt; t -&gt; t</span></span></code></pre></div><p>Division.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val rem : t -&gt; t -&gt; t</span></span></code></pre></div>`,26),p=[n];function o(c,l,d,g,r,h){return e(),a("div",null,p)}const b=s(i,[["render",o]]);export{v as __pageData,b as default};
