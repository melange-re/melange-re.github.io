import{_ as a,c as s,o as e,V as t}from"./chunks/framework.BCxdY_ip.js";const v=JSON.parse('{"title":"Module Belt.MutableMap","description":"","frontmatter":{},"headers":[],"relativePath":"api/re/melange/Belt-MutableMap.md","filePath":"api/re/melange/Belt-MutableMap.md"}'),p={name:"api/re/melange/Belt-MutableMap.md"},n=t(`<h1 id="module-belt-mutablemap" tabindex="-1">Module <code>Belt.MutableMap</code> <a class="header-anchor" href="#module-belt-mutablemap" aria-label="Permalink to &quot;Module \`Belt.MutableMap\`&quot;">â€‹</a></h1><p><a href="#"><code>Belt.MutableMap</code></a></p><p>The top level provides generic <strong>mutable</strong> map operations.</p><p>It also has two specialized inner modules <a href="./Belt-MutableMap-Int.html"><code>Belt.MutableMap.Int</code></a> and <a href="./Belt-MutableMap-String.html"><code>Belt.MutableMap.String</code></a></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>module Int: { ... };</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>module String: { ... };</span></span></code></pre></div><p>A <strong>mutable</strong> sorted map module which allows customize <em>compare</em> behavior.</p><p>Same as Belt.Map, but mutable.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>type t(&#39;k, &#39;v, &#39;id);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>type id(&#39;key, &#39;id) =</span></span>
<span class="line"><span>  (module Belt__.Belt_Id.Comparable</span></span>
<span class="line"><span>  with type identity = &#39;id</span></span>
<span class="line"><span>   and type t = &#39;key);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let make: id:id(&#39;k, &#39;id) =&gt; t(&#39;k, &#39;a, &#39;id);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let clear: t(_, _, _) =&gt; unit;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let isEmpty: t(_, _, _) =&gt; bool;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let has: t(&#39;k, _, _) =&gt; &#39;k =&gt; bool;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let cmpU: </span></span>
<span class="line"><span>  t(&#39;k, &#39;a, &#39;id) =&gt;</span></span>
<span class="line"><span>  t(&#39;k, &#39;a, &#39;id) =&gt;</span></span>
<span class="line"><span>  Js.Fn.arity2((&#39;a =&gt; &#39;a =&gt; int)) =&gt;</span></span>
<span class="line"><span>  int;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let cmp: t(&#39;k, &#39;a, &#39;id) =&gt; t(&#39;k, &#39;a, &#39;id) =&gt; (&#39;a =&gt; &#39;a =&gt; int) =&gt; int;</span></span></code></pre></div><p><code>cmp m1 m2 cmp</code> First compare by size, if size is the same, compare by key, value pair</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let eqU: </span></span>
<span class="line"><span>  t(&#39;k, &#39;a, &#39;id) =&gt;</span></span>
<span class="line"><span>  t(&#39;k, &#39;a, &#39;id) =&gt;</span></span>
<span class="line"><span>  Js.Fn.arity2((&#39;a =&gt; &#39;a =&gt; bool)) =&gt;</span></span>
<span class="line"><span>  bool;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let eq: t(&#39;k, &#39;a, &#39;id) =&gt; t(&#39;k, &#39;a, &#39;id) =&gt; (&#39;a =&gt; &#39;a =&gt; bool) =&gt; bool;</span></span></code></pre></div><p><code>eq m1 m2 eqf</code> tests whether the maps <code>m1</code> and <code>m2</code> are equal, that is, contain equal keys and associate them with equal data. <code>eqf</code> is the equality predicate used to compare the data associated with the keys.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let forEachU: t(&#39;k, &#39;a, &#39;id) =&gt; Js.Fn.arity2((&#39;k =&gt; &#39;a =&gt; unit)) =&gt; unit;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let forEach: t(&#39;k, &#39;a, &#39;id) =&gt; (&#39;k =&gt; &#39;a =&gt; unit) =&gt; unit;</span></span></code></pre></div><p><code>forEach m f</code> applies <code>f</code> to all bindings in map <code>m</code>. <code>f</code> receives the &#39;k as first argument, and the associated value as second argument. The bindings are passed to <code>f</code> in increasing order with respect to the ordering over the type of the keys.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let reduceU: </span></span>
<span class="line"><span>  t(&#39;k, &#39;a, &#39;id) =&gt;</span></span>
<span class="line"><span>  &#39;b =&gt;</span></span>
<span class="line"><span>  Js.Fn.arity3((&#39;b =&gt; &#39;k =&gt; &#39;a =&gt; &#39;b)) =&gt;</span></span>
<span class="line"><span>  &#39;b;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let reduce: t(&#39;k, &#39;a, &#39;id) =&gt; &#39;b =&gt; (&#39;b =&gt; &#39;k =&gt; &#39;a =&gt; &#39;b) =&gt; &#39;b;</span></span></code></pre></div><p><code>reduce m a f</code> computes <code>(f kN dN ... (f k1 d1 a)...)</code>, where <code>k1 ... kN</code> are the keys of all bindings in <code>m</code> (in increasing order), and <code>d1 ... dN</code> are the associated data.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let everyU: t(&#39;k, &#39;a, &#39;id) =&gt; Js.Fn.arity2((&#39;k =&gt; &#39;a =&gt; bool)) =&gt; bool;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let every: t(&#39;k, &#39;a, &#39;id) =&gt; (&#39;k =&gt; &#39;a =&gt; bool) =&gt; bool;</span></span></code></pre></div><p><code>every m p</code> checks if all the bindings of the map satisfy the predicate <code>p</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let someU: t(&#39;k, &#39;a, &#39;id) =&gt; Js.Fn.arity2((&#39;k =&gt; &#39;a =&gt; bool)) =&gt; bool;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let some: t(&#39;k, &#39;a, &#39;id) =&gt; (&#39;k =&gt; &#39;a =&gt; bool) =&gt; bool;</span></span></code></pre></div><p><code>some m p</code> checks if at least one binding of the map satisfy the predicate <code>p</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let size: t(&#39;k, &#39;a, &#39;id) =&gt; int;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let toList: t(&#39;k, &#39;a, &#39;id) =&gt; list((&#39;k, &#39;a));</span></span></code></pre></div><p>In increasing order</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let toArray: t(&#39;k, &#39;a, &#39;id) =&gt; array((&#39;k, &#39;a));</span></span></code></pre></div><p>In increasing order</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let fromArray: array((&#39;k, &#39;a)) =&gt; id:id(&#39;k, &#39;id) =&gt; t(&#39;k, &#39;a, &#39;id);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let keysToArray: t(&#39;k, _, _) =&gt; array(&#39;k);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let valuesToArray: t(_, &#39;a, _) =&gt; array(&#39;a);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let minKey: t(&#39;k, _, _) =&gt; option(&#39;k);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let minKeyUndefined: t(&#39;k, _, _) =&gt; Js.undefined(&#39;k);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let maxKey: t(&#39;k, _, _) =&gt; option(&#39;k);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let maxKeyUndefined: t(&#39;k, _, _) =&gt; Js.undefined(&#39;k);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let minimum: t(&#39;k, &#39;a, _) =&gt; option((&#39;k, &#39;a));</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let minUndefined: t(&#39;k, &#39;a, _) =&gt; Js.undefined((&#39;k, &#39;a));</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let maximum: t(&#39;k, &#39;a, _) =&gt; option((&#39;k, &#39;a));</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let maxUndefined: t(&#39;k, &#39;a, _) =&gt; Js.undefined((&#39;k, &#39;a));</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let get: t(&#39;k, &#39;a, &#39;id) =&gt; &#39;k =&gt; option(&#39;a);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let getUndefined: t(&#39;k, &#39;a, &#39;id) =&gt; &#39;k =&gt; Js.undefined(&#39;a);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let getWithDefault: t(&#39;k, &#39;a, &#39;id) =&gt; &#39;k =&gt; &#39;a =&gt; &#39;a;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let getExn: t(&#39;k, &#39;a, &#39;id) =&gt; &#39;k =&gt; &#39;a;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let checkInvariantInternal: t(_, _, _) =&gt; unit;</span></span></code></pre></div><p><strong>raise</strong> when invariant is not held</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let remove: t(&#39;k, &#39;a, &#39;id) =&gt; &#39;k =&gt; unit;</span></span></code></pre></div><p><code>remove m x</code> do the in-place modification,</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let removeMany: t(&#39;k, &#39;a, &#39;id) =&gt; array(&#39;k) =&gt; unit;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let set: t(&#39;k, &#39;a, &#39;id) =&gt; &#39;k =&gt; &#39;a =&gt; unit;</span></span></code></pre></div><p><code>set m x y </code> do the in-place modification</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let updateU: </span></span>
<span class="line"><span>  t(&#39;k, &#39;a, &#39;id) =&gt;</span></span>
<span class="line"><span>  &#39;k =&gt;</span></span>
<span class="line"><span>  Js.Fn.arity1((option(&#39;a) =&gt; option(&#39;a))) =&gt;</span></span>
<span class="line"><span>  unit;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let update: t(&#39;k, &#39;a, &#39;id) =&gt; &#39;k =&gt; (option(&#39;a) =&gt; option(&#39;a)) =&gt; unit;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let mergeMany: t(&#39;k, &#39;a, &#39;id) =&gt; array((&#39;k, &#39;a)) =&gt; unit;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let mapU: t(&#39;k, &#39;a, &#39;id) =&gt; Js.Fn.arity1((&#39;a =&gt; &#39;b)) =&gt; t(&#39;k, &#39;b, &#39;id);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let map: t(&#39;k, &#39;a, &#39;id) =&gt; (&#39;a =&gt; &#39;b) =&gt; t(&#39;k, &#39;b, &#39;id);</span></span></code></pre></div><p><code>map m f</code> returns a map with same domain as <code>m</code>, where the associated value <code>a</code> of all bindings of <code>m</code> has been replaced by the result of the application of <code>f</code> to <code>a</code>. The bindings are passed to <code>f</code> in increasing order with respect to the ordering over the type of the keys.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let mapWithKeyU: </span></span>
<span class="line"><span>  t(&#39;k, &#39;a, &#39;id) =&gt;</span></span>
<span class="line"><span>  Js.Fn.arity2((&#39;k =&gt; &#39;a =&gt; &#39;b)) =&gt;</span></span>
<span class="line"><span>  t(&#39;k, &#39;b, &#39;id);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let mapWithKey: t(&#39;k, &#39;a, &#39;id) =&gt; (&#39;k =&gt; &#39;a =&gt; &#39;b) =&gt; t(&#39;k, &#39;b, &#39;id);</span></span></code></pre></div>`,67),i=[n];function l(o,d,c,g,h,u){return e(),s("div",null,i)}const b=a(p,[["render",l]]);export{v as __pageData,b as default};
