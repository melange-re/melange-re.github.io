import{_ as s,c as a,o as e,V as n}from"./chunks/framework.BCxdY_ip.js";const u=JSON.parse('{"title":"Module Map.Dict","description":"","frontmatter":{},"headers":[],"relativePath":"api/re/melange/Belt-Map-Dict.md","filePath":"api/re/melange/Belt-Map-Dict.md"}'),t={name:"api/re/melange/Belt-Map-Dict.md"},p=n(`<h1 id="module-map-dict" tabindex="-1">Module <code>Map.Dict</code> <a class="header-anchor" href="#module-map-dict" aria-label="Permalink to &quot;Module \`Map.Dict\`&quot;">â€‹</a></h1><p>This module seprate identity from data, it is a bit more verboe but slightly more efficient due to the fact that there is no need to pack identity and data back after each operation</p><p><strong>Advanced usage only</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>type t(&#39;key, &#39;value, &#39;id);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>type cmp(&#39;key, &#39;id);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let empty: t(&#39;k, &#39;v, &#39;id);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let isEmpty: t(&#39;k, &#39;v, &#39;id) =&gt; bool;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let has: t(&#39;k, &#39;a, &#39;id) =&gt; &#39;k =&gt; cmp:cmp(&#39;k, &#39;id) =&gt; bool;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let cmpU: </span></span>
<span class="line"><span>  t(&#39;k, &#39;v, &#39;id) =&gt;</span></span>
<span class="line"><span>  t(&#39;k, &#39;v, &#39;id) =&gt;</span></span>
<span class="line"><span>  kcmp:cmp(&#39;k, &#39;id) =&gt;</span></span>
<span class="line"><span>  vcmp:Js.Fn.arity2((&#39;v =&gt; &#39;v =&gt; int)) =&gt;</span></span>
<span class="line"><span>  int;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let cmp: </span></span>
<span class="line"><span>  t(&#39;k, &#39;v, &#39;id) =&gt;</span></span>
<span class="line"><span>  t(&#39;k, &#39;v, &#39;id) =&gt;</span></span>
<span class="line"><span>  kcmp:cmp(&#39;k, &#39;id) =&gt;</span></span>
<span class="line"><span>  vcmp:(&#39;v =&gt; &#39;v =&gt; int) =&gt;</span></span>
<span class="line"><span>  int;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let eqU: </span></span>
<span class="line"><span>  t(&#39;k, &#39;a, &#39;id) =&gt;</span></span>
<span class="line"><span>  t(&#39;k, &#39;a, &#39;id) =&gt;</span></span>
<span class="line"><span>  kcmp:cmp(&#39;k, &#39;id) =&gt;</span></span>
<span class="line"><span>  veq:Js.Fn.arity2((&#39;a =&gt; &#39;a =&gt; bool)) =&gt;</span></span>
<span class="line"><span>  bool;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let eq: </span></span>
<span class="line"><span>  t(&#39;k, &#39;a, &#39;id) =&gt;</span></span>
<span class="line"><span>  t(&#39;k, &#39;a, &#39;id) =&gt;</span></span>
<span class="line"><span>  kcmp:cmp(&#39;k, &#39;id) =&gt;</span></span>
<span class="line"><span>  veq:(&#39;a =&gt; &#39;a =&gt; bool) =&gt;</span></span>
<span class="line"><span>  bool;</span></span></code></pre></div><p><code>eq m1 m2 cmp</code> tests whether the maps <code>m1</code> and <code>m2</code> are equal, that is, contain equal keys and associate them with equal data. <code>cmp</code> is the equality predicate used to compare the data associated with the keys.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let findFirstByU: </span></span>
<span class="line"><span>  t(&#39;k, &#39;v, &#39;id) =&gt;</span></span>
<span class="line"><span>  Js.Fn.arity2((&#39;k =&gt; &#39;v =&gt; bool)) =&gt;</span></span>
<span class="line"><span>  option((&#39;k, &#39;v));</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let findFirstBy: t(&#39;k, &#39;v, &#39;id) =&gt; (&#39;k =&gt; &#39;v =&gt; bool) =&gt; option((&#39;k, &#39;v));</span></span></code></pre></div><p><code>findFirstBy m p</code> uses funcion <code>f</code> to find the first key value pair to match predicate <code>p</code>.</p><div class="language-ocaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ocaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> s0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fromArray ~id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">module</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> IntCmp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) [|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;4&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2,&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  findFirstBy s0 (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> k v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> k </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> option (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">;;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let forEachU: t(&#39;k, &#39;a, &#39;id) =&gt; Js.Fn.arity2((&#39;k =&gt; &#39;a =&gt; unit)) =&gt; unit;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let forEach: t(&#39;k, &#39;a, &#39;id) =&gt; (&#39;k =&gt; &#39;a =&gt; unit) =&gt; unit;</span></span></code></pre></div><p><code>forEach m f</code> applies <code>f</code> to all bindings in map <code>m</code>. <code>f</code> receives the key as first argument, and the associated value as second argument. The bindings are passed to <code>f</code> in increasing order with respect to the ordering over the type of the keys.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let reduceU: </span></span>
<span class="line"><span>  t(&#39;k, &#39;a, &#39;id) =&gt;</span></span>
<span class="line"><span>  &#39;b =&gt;</span></span>
<span class="line"><span>  Js.Fn.arity3((&#39;b =&gt; &#39;k =&gt; &#39;a =&gt; &#39;b)) =&gt;</span></span>
<span class="line"><span>  &#39;b;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let reduce: t(&#39;k, &#39;a, &#39;id) =&gt; &#39;b =&gt; (&#39;b =&gt; &#39;k =&gt; &#39;a =&gt; &#39;b) =&gt; &#39;b;</span></span></code></pre></div><p><code>reduce m a f</code> computes <code>(f kN dN ... (f k1 d1 a)...)</code>, where <code>k1 ... kN</code> are the keys of all bindings in <code>m</code> (in increasing order), and <code>d1 ... dN</code> are the associated data.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let everyU: t(&#39;k, &#39;a, &#39;id) =&gt; Js.Fn.arity2((&#39;k =&gt; &#39;a =&gt; bool)) =&gt; bool;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let every: t(&#39;k, &#39;a, &#39;id) =&gt; (&#39;k =&gt; &#39;a =&gt; bool) =&gt; bool;</span></span></code></pre></div><p><code>every m p</code> checks if all the bindings of the map satisfy the predicate <code>p</code>. Order unspecified</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let someU: t(&#39;k, &#39;a, &#39;id) =&gt; Js.Fn.arity2((&#39;k =&gt; &#39;a =&gt; bool)) =&gt; bool;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let some: t(&#39;k, &#39;a, &#39;id) =&gt; (&#39;k =&gt; &#39;a =&gt; bool) =&gt; bool;</span></span></code></pre></div><p><code>some m p</code> checks if at least one binding of the map satisfy the predicate <code>p</code>. Order unspecified</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let size: t(&#39;k, &#39;a, &#39;id) =&gt; int;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let toList: t(&#39;k, &#39;a, &#39;id) =&gt; list((&#39;k, &#39;a));</span></span></code></pre></div><p>In increasing order.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let toArray: t(&#39;k, &#39;a, &#39;id) =&gt; array((&#39;k, &#39;a));</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let fromArray: array((&#39;k, &#39;a)) =&gt; cmp:cmp(&#39;k, &#39;id) =&gt; t(&#39;k, &#39;a, &#39;id);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let keysToArray: t(&#39;k, &#39;a, &#39;id) =&gt; array(&#39;k);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let valuesToArray: t(&#39;k, &#39;a, &#39;id) =&gt; array(&#39;a);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let minKey: t(&#39;k, _, _) =&gt; option(&#39;k);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let minKeyUndefined: t(&#39;k, _, _) =&gt; Js.undefined(&#39;k);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let maxKey: t(&#39;k, _, _) =&gt; option(&#39;k);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let maxKeyUndefined: t(&#39;k, _, _) =&gt; Js.undefined(&#39;k);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let minimum: t(&#39;k, &#39;a, _) =&gt; option((&#39;k, &#39;a));</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let minUndefined: t(&#39;k, &#39;a, _) =&gt; Js.undefined((&#39;k, &#39;a));</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let maximum: t(&#39;k, &#39;a, _) =&gt; option((&#39;k, &#39;a));</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let maxUndefined: t(&#39;k, &#39;a, _) =&gt; Js.undefined((&#39;k, &#39;a));</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let get: t(&#39;k, &#39;a, &#39;id) =&gt; &#39;k =&gt; cmp:cmp(&#39;k, &#39;id) =&gt; option(&#39;a);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let getUndefined: t(&#39;k, &#39;a, &#39;id) =&gt; &#39;k =&gt; cmp:cmp(&#39;k, &#39;id) =&gt; Js.undefined(&#39;a);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let getWithDefault: t(&#39;k, &#39;a, &#39;id) =&gt; &#39;k =&gt; &#39;a =&gt; cmp:cmp(&#39;k, &#39;id) =&gt; &#39;a;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let getExn: t(&#39;k, &#39;a, &#39;id) =&gt; &#39;k =&gt; cmp:cmp(&#39;k, &#39;id) =&gt; &#39;a;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let checkInvariantInternal: t(_, _, _) =&gt; unit;</span></span></code></pre></div><p><strong>raise</strong> when invariant is not held</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let remove: t(&#39;a, &#39;b, &#39;id) =&gt; &#39;a =&gt; cmp:cmp(&#39;a, &#39;id) =&gt; t(&#39;a, &#39;b, &#39;id);</span></span></code></pre></div><p><code>remove m x</code> returns a map containing the same bindings as <code>m</code>, except for <code>x</code> which is unbound in the returned map.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let removeMany: </span></span>
<span class="line"><span>  t(&#39;a, &#39;b, &#39;id) =&gt;</span></span>
<span class="line"><span>  array(&#39;a) =&gt;</span></span>
<span class="line"><span>  cmp:cmp(&#39;a, &#39;id) =&gt;</span></span>
<span class="line"><span>  t(&#39;a, &#39;b, &#39;id);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let set: t(&#39;a, &#39;b, &#39;id) =&gt; &#39;a =&gt; &#39;b =&gt; cmp:cmp(&#39;a, &#39;id) =&gt; t(&#39;a, &#39;b, &#39;id);</span></span></code></pre></div><p><code>set m x y</code> returns a map containing the same bindings as <code>m</code>, plus a binding of <code>x</code> to <code>y</code>. If <code>x</code> was already bound in <code>m</code>, its previous binding disappears.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let updateU: </span></span>
<span class="line"><span>  t(&#39;a, &#39;b, &#39;id) =&gt;</span></span>
<span class="line"><span>  &#39;a =&gt;</span></span>
<span class="line"><span>  Js.Fn.arity1((option(&#39;b) =&gt; option(&#39;b))) =&gt;</span></span>
<span class="line"><span>  cmp:cmp(&#39;a, &#39;id) =&gt;</span></span>
<span class="line"><span>  t(&#39;a, &#39;b, &#39;id);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let update: </span></span>
<span class="line"><span>  t(&#39;a, &#39;b, &#39;id) =&gt;</span></span>
<span class="line"><span>  &#39;a =&gt;</span></span>
<span class="line"><span>  (option(&#39;b) =&gt; option(&#39;b)) =&gt;</span></span>
<span class="line"><span>  cmp:cmp(&#39;a, &#39;id) =&gt;</span></span>
<span class="line"><span>  t(&#39;a, &#39;b, &#39;id);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let mergeU: </span></span>
<span class="line"><span>  t(&#39;a, &#39;b, &#39;id) =&gt;</span></span>
<span class="line"><span>  t(&#39;a, &#39;c, &#39;id) =&gt;</span></span>
<span class="line"><span>  Js.Fn.arity3((&#39;a =&gt; option(&#39;b) =&gt; option(&#39;c) =&gt; option(&#39;d))) =&gt;</span></span>
<span class="line"><span>  cmp:cmp(&#39;a, &#39;id) =&gt;</span></span>
<span class="line"><span>  t(&#39;a, &#39;d, &#39;id);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let merge: </span></span>
<span class="line"><span>  t(&#39;a, &#39;b, &#39;id) =&gt;</span></span>
<span class="line"><span>  t(&#39;a, &#39;c, &#39;id) =&gt;</span></span>
<span class="line"><span>  (&#39;a =&gt; option(&#39;b) =&gt; option(&#39;c) =&gt; option(&#39;d)) =&gt;</span></span>
<span class="line"><span>  cmp:cmp(&#39;a, &#39;id) =&gt;</span></span>
<span class="line"><span>  t(&#39;a, &#39;d, &#39;id);</span></span></code></pre></div><p><code>merge m1 m2 f</code> computes a map whose keys is a subset of keys of <code>m1</code> and of <code>m2</code>. The presence of each such binding, and the corresponding value, is determined with the function <code>f</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let mergeMany: </span></span>
<span class="line"><span>  t(&#39;a, &#39;b, &#39;id) =&gt;</span></span>
<span class="line"><span>  array((&#39;a, &#39;b)) =&gt;</span></span>
<span class="line"><span>  cmp:cmp(&#39;a, &#39;id) =&gt;</span></span>
<span class="line"><span>  t(&#39;a, &#39;b, &#39;id);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let keepU: </span></span>
<span class="line"><span>  t(&#39;k, &#39;a, &#39;id) =&gt;</span></span>
<span class="line"><span>  Js.Fn.arity2((&#39;k =&gt; &#39;a =&gt; bool)) =&gt;</span></span>
<span class="line"><span>  t(&#39;k, &#39;a, &#39;id);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let keep: t(&#39;k, &#39;a, &#39;id) =&gt; (&#39;k =&gt; &#39;a =&gt; bool) =&gt; t(&#39;k, &#39;a, &#39;id);</span></span></code></pre></div><p><code>keep m p</code> returns the map with all the bindings in <code>m</code> that satisfy predicate <code>p</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let partitionU: </span></span>
<span class="line"><span>  t(&#39;k, &#39;a, &#39;id) =&gt;</span></span>
<span class="line"><span>  Js.Fn.arity2((&#39;k =&gt; &#39;a =&gt; bool)) =&gt;</span></span>
<span class="line"><span>  (t(&#39;k, &#39;a, &#39;id), t(&#39;k, &#39;a, &#39;id));</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let partition: </span></span>
<span class="line"><span>  t(&#39;k, &#39;a, &#39;id) =&gt;</span></span>
<span class="line"><span>  (&#39;k =&gt; &#39;a =&gt; bool) =&gt;</span></span>
<span class="line"><span>  (t(&#39;k, &#39;a, &#39;id), t(&#39;k, &#39;a, &#39;id));</span></span></code></pre></div><p><code>partition m p</code> returns a pair of maps <code>(m1, m2)</code>, where <code>m1</code> contains all the bindings of <code>s</code> that satisfy the predicate <code>p</code>, and <code>m2</code> is the map with all the bindings of <code>s</code> that do not satisfy <code>p</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let split: </span></span>
<span class="line"><span>  t(&#39;a, &#39;b, &#39;id) =&gt;</span></span>
<span class="line"><span>  &#39;a =&gt;</span></span>
<span class="line"><span>  cmp:cmp(&#39;a, &#39;id) =&gt;</span></span>
<span class="line"><span>  ((t(&#39;a, &#39;b, &#39;id), t(&#39;a, &#39;b, &#39;id)), option(&#39;b));</span></span></code></pre></div><p><code>split x m</code> returns a triple <code>(l, data, r)</code>, where <code>l</code> is the map with all the bindings of <code>m</code> whose key is strictly less than <code>x</code>; <code>r</code> is the map with all the bindings of <code>m</code> whose key is strictly greater than <code>x</code>; <code>data</code> is <code>None</code> if <code>m</code> contains no binding for <code>x</code>, or <code>Some v</code> if <code>m</code> binds <code>v</code> to <code>x</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let mapU: t(&#39;k, &#39;a, &#39;id) =&gt; Js.Fn.arity1((&#39;a =&gt; &#39;b)) =&gt; t(&#39;k, &#39;b, &#39;id);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let map: t(&#39;k, &#39;a, &#39;id) =&gt; (&#39;a =&gt; &#39;b) =&gt; t(&#39;k, &#39;b, &#39;id);</span></span></code></pre></div><p><code>map m f</code> returns a map with same domain as <code>m</code>, where the associated value <code>a</code> of all bindings of <code>m</code> has been replaced by the result of the application of <code>f</code> to <code>a</code>. The bindings are passed to <code>f</code> in increasing order with respect to the ordering over the type of the keys.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let mapWithKeyU: </span></span>
<span class="line"><span>  t(&#39;k, &#39;a, &#39;id) =&gt;</span></span>
<span class="line"><span>  Js.Fn.arity2((&#39;k =&gt; &#39;a =&gt; &#39;b)) =&gt;</span></span>
<span class="line"><span>  t(&#39;k, &#39;b, &#39;id);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let mapWithKey: t(&#39;k, &#39;a, &#39;id) =&gt; (&#39;k =&gt; &#39;a =&gt; &#39;b) =&gt; t(&#39;k, &#39;b, &#39;id);</span></span></code></pre></div>`,74),i=[p];function l(d,c,o,h,g,k){return e(),a("div",null,i)}const v=s(t,[["render",l]]);export{u as __pageData,v as default};
