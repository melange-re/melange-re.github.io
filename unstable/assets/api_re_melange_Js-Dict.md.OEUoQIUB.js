import{_ as e,c as s,o as a,V as t}from"./chunks/framework.BCxdY_ip.js";const k=JSON.parse('{"title":"Module Js.Dict","description":"","frontmatter":{},"headers":[],"relativePath":"api/re/melange/Js-Dict.md","filePath":"api/re/melange/Js-Dict.md"}'),i={name:"api/re/melange/Js-Dict.md"},n=t('<h1 id="module-js-dict" tabindex="-1">Module <code>Js.Dict</code> <a class="header-anchor" href="#module-js-dict" aria-label="Permalink to &quot;Module `Js.Dict`&quot;">â€‹</a></h1><p>Utility functions to treat a JS object as a dictionary</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>type t(&#39;a) = Js.dict(&#39;a);</span></span></code></pre></div><p>Dictionary type (ie an &#39;{ }&#39; JS object). However it is restricted to hold a single type; therefore values must have the same type.</p><p>This Dictionary type is mostly used with the <code>Js_json.t</code> type.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>type key = string;</span></span></code></pre></div><p>Key type</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let get: t(&#39;a) =&gt; key =&gt; option(&#39;a);</span></span></code></pre></div><p><code>get dict key</code> returns <code>None</code> if the <code>key</code> is not found in the dictionary, <code>Some value</code> otherwise</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let unsafeGet: t(&#39;a) =&gt; key =&gt; &#39;a;</span></span></code></pre></div><p><code>unsafeGet dict key</code> return the value if the <code>key</code> exists, otherwise an <strong>undefined</strong> value is returned. Must be used only when the existence of a key is certain. (i.e. when having called <code>keys</code> function previously.</p><div class="language-ocaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ocaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Array</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">iter (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Js</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">log (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Js_dict</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">unsafeGet dic key)) (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Js_dict</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">keys dict)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let set: t(&#39;a) =&gt; key =&gt; &#39;a =&gt; unit;</span></span></code></pre></div><p><code>set dict key value</code> sets the <code>key</code>/<code>value</code> in <code>dict</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let keys: t(&#39;a) =&gt; array(string);</span></span></code></pre></div><p><code>keys dict</code> returns all the keys in the dictionary <code>dict</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let empty: unit =&gt; t(&#39;a);</span></span></code></pre></div><p><code>empty ()</code> returns an empty dictionary</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let unsafeDeleteKey: Js.Fn.arity2((t(string) =&gt; string =&gt; unit));</span></span></code></pre></div><p>Experimental internal function</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let entries: t(&#39;a) =&gt; array((key, &#39;a));</span></span></code></pre></div><p><code>entries dict</code> returns the key value pairs in <code>dict</code> (ES2017)</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let values: t(&#39;a) =&gt; array(&#39;a);</span></span></code></pre></div><p><code>values dict</code> returns the values in <code>dict</code> (ES2017)</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let fromList: list((key, &#39;a)) =&gt; t(&#39;a);</span></span></code></pre></div><p><code>fromList entries</code> creates a new dictionary containing each <code>(key, value)</code> pair in <code>entries</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let fromArray: array((key, &#39;a)) =&gt; t(&#39;a);</span></span></code></pre></div><p><code>fromArray entries</code> creates a new dictionary containing each <code>(key, value)</code> pair in <code>entries</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let map: f:Js.Fn.arity1((&#39;a =&gt; &#39;b)) =&gt; t(&#39;a) =&gt; t(&#39;b);</span></span></code></pre></div><p><code>map f dict</code> maps <code>dict</code> to a new dictionary with the same keys, using <code>f</code> to map each value</p>',30),p=[n];function c(o,d,l,h,r,g){return a(),s("div",null,p)}const y=e(i,[["render",c]]);export{k as __pageData,y as default};
