import{_ as s,c as a,o as e,V as n}from"./chunks/framework.BCxdY_ip.js";const v=JSON.parse('{"title":"Module Fs.Watch","description":"","frontmatter":{},"headers":[],"relativePath":"api/ml/melange/Node-Fs-Watch.md","filePath":"api/ml/melange/Node-Fs-Watch.md"}'),t={name:"api/ml/melange/Node-Fs-Watch.md"},p=n(`<h1 id="module-fs-watch" tabindex="-1">Module <code>Fs.Watch</code> <a class="header-anchor" href="#module-fs-watch" aria-label="Permalink to &quot;Module \`Fs.Watch\`&quot;">â€‹</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>type t</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>type config</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val config : </span></span>
<span class="line"><span>  ?persistent:bool -&gt;</span></span>
<span class="line"><span>  ?recursive:bool -&gt;</span></span>
<span class="line"><span>  ?encoding:Js.String.t -&gt;</span></span>
<span class="line"><span>  unit -&gt;</span></span>
<span class="line"><span>  config</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val watch : string -&gt; ?config:config -&gt; unit -&gt; t</span></span></code></pre></div><p>there is no need to accept listener, since we return a <code>watcher</code> back it can register event listener there. Currently we introduce a type <code>string_buffer</code>, for the <code>filename</code>, it will be <code>Buffer</code> when the encoding is \`\`utf8\`. This is dependent type which can be tracked by GADT in some way, but to make things simple, let&#39;s just introduce an or type</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val on : </span></span>
<span class="line"><span>  t -&gt;</span></span>
<span class="line"><span>  f:</span></span>
<span class="line"><span>    [ \`change of (string -&gt; Node.string_buffer -&gt; unit) Js.Fn.arity2</span></span>
<span class="line"><span>    | \`error of unit Js.Fn.arity0 ] -&gt;</span></span>
<span class="line"><span>  t</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val close : t -&gt; unit</span></span></code></pre></div>`,8),i=[p];function c(l,o,d,h,r,g){return e(),a("div",null,i)}const b=s(t,[["render",c]]);export{v as __pageData,b as default};
