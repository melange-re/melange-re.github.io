import{_ as e,c as t,o as a,V as s}from"./chunks/framework.BCxdY_ip.js";const u=JSON.parse('{"title":"Module SortArray.String","description":"","frontmatter":{},"headers":[],"relativePath":"api/re/melange/Belt-SortArray-String.md","filePath":"api/re/melange/Belt-SortArray-String.md"}'),r={name:"api/re/melange/Belt-SortArray-String.md"},n=s('<h1 id="module-sortarray-string" tabindex="-1">Module <code>SortArray.String</code> <a class="header-anchor" href="#module-sortarray-string" aria-label="Permalink to &quot;Module `SortArray.String`&quot;">â€‹</a></h1><p>Specalized when key type is <code>string</code>, more efficient than the generic type</p><p>This is a specialized module for <a href="./Belt-SortArray.html"><code>Belt.SortArray</code></a>, the docs in that module also applies here, except the comparator is fixed and inlined</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>type element = string;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let strictlySortedLength: array(element) =&gt; int;</span></span></code></pre></div><p>The same as <a href="./Belt-SortArray.html#val-strictlySortedLength"><code>Belt.SortArray.strictlySortedLength</code></a> except the comparator is fixed</p><p>returns +n means increasing order -n means negative order</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let isSorted: array(element) =&gt; bool;</span></span></code></pre></div><p><code>sorted xs</code> return true if <code>xs</code> is in non strict increasing order</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let stableSortInPlace: array(element) =&gt; unit;</span></span></code></pre></div><p>The same as <a href="./Belt-SortArray.html#val-stableSortInPlaceBy"><code>Belt.SortArray.stableSortInPlaceBy</code></a> except the comparator is fixed</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let stableSort: array(element) =&gt; array(element);</span></span></code></pre></div><p>The same as <a href="./Belt-SortArray.html#val-stableSortBy"><code>Belt.SortArray.stableSortBy</code></a> except the comparator is fixed</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let binarySearch: array(element) =&gt; element =&gt; int;</span></span></code></pre></div><p>If value is not found and value is less than one or more elements in array, the negative number returned is the bitwise complement of the index of the first element that is larger than value.</p><p>If value is not found and value is greater than all elements in array, the negative number returned is the bitwise complement of (the index of the last element plus 1)</p><p>for example, if <code>key</code> is smaller than all elements return <code>-1</code> since <code>lnot (-1) = 0</code> if <code>key</code> is larger than all elements return <code>- (len + 1)</code> since <code>lnot (-(len+1)) = len</code></p>',17),o=[n];function i(l,p,c,d,h,g){return a(),t("div",null,o)}const y=e(r,[["render",i]]);export{u as __pageData,y as default};
