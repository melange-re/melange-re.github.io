import{_ as s,c as a,o as e,V as t}from"./chunks/framework.BCxdY_ip.js";const v=JSON.parse('{"title":"Module Node.Process","description":"","frontmatter":{},"headers":[],"relativePath":"api/re/melange/Node-Process.md","filePath":"api/re/melange/Node-Process.md"}'),n={name:"api/re/melange/Node-Process.md"},p=t(`<h1 id="module-node-process" tabindex="-1">Module <code>Node.Process</code> <a class="header-anchor" href="#module-node-process" aria-label="Permalink to &quot;Module \`Node.Process\`&quot;">â€‹</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>type t =</span></span>
<span class="line"><span>  Js.t({. argv: array(string)</span></span>
<span class="line"><span>    , arch: string</span></span>
<span class="line"><span>    , abort: Js.OO.Meth.arity0(unit)</span></span>
<span class="line"><span>    , chdir: Js.OO.Meth.arity1((string =&gt; unit))</span></span>
<span class="line"><span>    , cwd: Js.OO.Meth.arity0(string)</span></span>
<span class="line"><span>    , disconnect: Js.OO.Meth.arity0(unit)</span></span>
<span class="line"><span>    , platform: string</span></span>
<span class="line"><span>    , env: Js.Dict.t(string)});</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let process: t;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let argv: array(string);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let exit: int =&gt; &#39;a;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let cwd: unit =&gt; string;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let uptime: t =&gt; unit =&gt; float;</span></span></code></pre></div><p>The process.uptime() method returns the number of seconds the current Node.js process has been running.)</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let putEnvVar: string =&gt; string =&gt; unit;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let deleteEnvVar: string =&gt; unit;</span></span></code></pre></div>`,10),i=[p];function l(o,c,d,r,h,g){return e(),a("div",null,i)}const b=s(n,[["render",l]]);export{v as __pageData,b as default};
