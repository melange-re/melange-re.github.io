import{_ as e,c as s,o as t,V as a}from"./chunks/framework.BCxdY_ip.js";const b=JSON.parse('{"title":"Module Js.Blob","description":"","frontmatter":{},"headers":[],"relativePath":"api/ml/melange/Js-Blob.md","filePath":"api/ml/melange/Js-Blob.md"}'),n={name:"api/ml/melange/Js-Blob.md"},i=a('<h1 id="module-js-blob" tabindex="-1">Module <code>Js.Blob</code> <a class="header-anchor" href="#module-js-blob" aria-label="Permalink to &quot;Module `Js.Blob`&quot;">â€‹</a></h1><p>Bindings to Blob</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>type t = Js.blob</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>type options = {</span></span></code></pre></div><p><code>type_ : string option;</code> A string representing the MIME type of the content that will be put into the file. Defaults to a value of &quot;&quot;.</p><p><code>endings : [ </code>transparent | <code>native ] option;</code> How to interpret newline characters (\\n) within the contents, if the data is text. The default value, transparent, copies newline characters into the blob without changing them. To convert newlines to the host system&#39;s native convention, specify the value native.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>}</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val options : </span></span>\n<span class="line"><span>  ?type_:string -&gt;</span></span>\n<span class="line"><span>  ?endings:[ `transparent | `native ] -&gt;</span></span>\n<span class="line"><span>  unit -&gt;</span></span>\n<span class="line"><span>  options</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val make : string Js.iterator -&gt; ?options:options -&gt; unit -&gt; t</span></span></code></pre></div><p><code>make (Js.Array.values contents_array)</code> creates a new file from an iterable object such as an Array, having ArrayBuffers, TypedArrays, DataViews, Blobs, strings, or a mix of any of such elements, that will be put inside the File. Note that strings here are encoded as UTF-8, unlike the usual JavaScript UTF-16 strings.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val size : t -&gt; float</span></span></code></pre></div><p><code>size t</code> returns the size of the Blob in bytes</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val type_ : t -&gt; string</span></span></code></pre></div><p><code>type_ t</code> returns the MIME type of the file.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val arrayBuffer : t -&gt; Js.arrayBuffer Js.promise</span></span></code></pre></div><p><code>arrayBuffer t</code> returns a Promise that resolves with the contents of the blob as binary data contained in a <code>Js.arrayBuffer</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val bytes : t -&gt; Js.uint8Array Js.promise</span></span></code></pre></div><p><code>bytes t</code> returns a Promise that resolves with a <code>Js.uint8Array</code> containing the contents of the blob as an array of bytes.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val slice : ?start:int -&gt; ?end_:int -&gt; ?contentType:string -&gt; t -&gt; t</span></span></code></pre></div><p><code>slice ?start ?end_ ?contentType t</code> creates and returns a new Blob object which contains data from a subset of the blob on which it&#39;s called.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val text : t -&gt; string Js.promise</span></span></code></pre></div><p><code>text t</code> returns a Promise that resolves with a string containing the contents of the blob, interpreted as UTF-8.</p>',22),o=[i];function p(l,c,d,r,h,g){return t(),s("div",null,o)}const v=e(n,[["render",p]]);export{b as __pageData,v as default};
