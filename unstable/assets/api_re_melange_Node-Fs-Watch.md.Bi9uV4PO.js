import{_ as s,c as e,o as a,V as n}from"./chunks/framework.BCxdY_ip.js";const b=JSON.parse('{"title":"Module Fs.Watch","description":"","frontmatter":{},"headers":[],"relativePath":"api/re/melange/Node-Fs-Watch.md","filePath":"api/re/melange/Node-Fs-Watch.md"}'),t={name:"api/re/melange/Node-Fs-Watch.md"},p=n(`<h1 id="module-fs-watch" tabindex="-1">Module <code>Fs.Watch</code> <a class="header-anchor" href="#module-fs-watch" aria-label="Permalink to &quot;Module \`Fs.Watch\`&quot;">â€‹</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>type t;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>type config;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let config: </span></span>
<span class="line"><span>  ?persistent:bool =&gt;</span></span>
<span class="line"><span>  ?recursive:bool =&gt;</span></span>
<span class="line"><span>  ?encoding:Js.String.t =&gt;</span></span>
<span class="line"><span>  unit =&gt;</span></span>
<span class="line"><span>  config;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let watch: string =&gt; ?config:config =&gt; unit =&gt; t;</span></span></code></pre></div><p>there is no need to accept listener, since we return a <code>watcher</code> back it can register event listener there. Currently we introduce a type <code>string_buffer</code>, for the <code>filename</code>, it will be <code>Buffer</code> when the encoding is \`\`utf8\`. This is dependent type which can be tracked by GADT in some way, but to make things simple, let&#39;s just introduce an or type</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let on: </span></span>
<span class="line"><span>  t =&gt;</span></span>
<span class="line"><span>  f:</span></span>
<span class="line"><span>    [ \`change(Js.Fn.arity2((string =&gt; Node.string_buffer =&gt; unit)))</span></span>
<span class="line"><span>    | \`error(Js.Fn.arity0(unit)) ] =&gt;</span></span>
<span class="line"><span>  t;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let close: t =&gt; unit;</span></span></code></pre></div>`,8),i=[p];function c(l,o,d,r,h,g){return a(),e("div",null,i)}const v=s(t,[["render",c]]);export{b as __pageData,v as default};
