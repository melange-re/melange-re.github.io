import{_ as s,c as e,o as a,V as t}from"./chunks/framework.BCxdY_ip.js";const r=JSON.parse('{"title":"Module Set.Dict","description":"","frontmatter":{},"headers":[],"relativePath":"api/re/melange/Belt-Set-Dict.md","filePath":"api/re/melange/Belt-Set-Dict.md"}'),n={name:"api/re/melange/Belt-Set-Dict.md"},p=t(`<h1 id="module-set-dict" tabindex="-1">Module <code>Set.Dict</code> <a class="header-anchor" href="#module-set-dict" aria-label="Permalink to &quot;Module \`Set.Dict\`&quot;">â€‹</a></h1><p>This module seprate identity from data, it is a bit more verboe but slightly more efficient due to the fact that there is no need to pack identity and data back after each operation</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>type t(&#39;value, &#39;identity);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>type cmp(&#39;value, &#39;id);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let empty: t(&#39;value, &#39;id);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let fromArray: array(&#39;value) =&gt; cmp:cmp(&#39;value, &#39;id) =&gt; t(&#39;value, &#39;id);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let fromSortedArrayUnsafe: array(&#39;value) =&gt; t(&#39;value, &#39;id);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let isEmpty: t(_, _) =&gt; bool;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let has: t(&#39;value, &#39;id) =&gt; &#39;value =&gt; cmp:cmp(&#39;value, &#39;id) =&gt; bool;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let add: t(&#39;value, &#39;id) =&gt; &#39;value =&gt; cmp:cmp(&#39;value, &#39;id) =&gt; t(&#39;value, &#39;id);</span></span></code></pre></div><p><code>add s x</code> If <code>x</code> was already in <code>s</code>, <code>s</code> is returned unchanged.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let mergeMany: </span></span>
<span class="line"><span>  t(&#39;value, &#39;id) =&gt;</span></span>
<span class="line"><span>  array(&#39;value) =&gt;</span></span>
<span class="line"><span>  cmp:cmp(&#39;value, &#39;id) =&gt;</span></span>
<span class="line"><span>  t(&#39;value, &#39;id);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let remove: t(&#39;value, &#39;id) =&gt; &#39;value =&gt; cmp:cmp(&#39;value, &#39;id) =&gt; t(&#39;value, &#39;id);</span></span></code></pre></div><p><code>remove m x</code> If <code>x</code> was not in <code>m</code>, <code>m</code> is returned reference unchanged.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let removeMany: </span></span>
<span class="line"><span>  t(&#39;value, &#39;id) =&gt;</span></span>
<span class="line"><span>  array(&#39;value) =&gt;</span></span>
<span class="line"><span>  cmp:cmp(&#39;value, &#39;id) =&gt;</span></span>
<span class="line"><span>  t(&#39;value, &#39;id);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let union: </span></span>
<span class="line"><span>  t(&#39;value, &#39;id) =&gt;</span></span>
<span class="line"><span>  t(&#39;value, &#39;id) =&gt;</span></span>
<span class="line"><span>  cmp:cmp(&#39;value, &#39;id) =&gt;</span></span>
<span class="line"><span>  t(&#39;value, &#39;id);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let intersect: </span></span>
<span class="line"><span>  t(&#39;value, &#39;id) =&gt;</span></span>
<span class="line"><span>  t(&#39;value, &#39;id) =&gt;</span></span>
<span class="line"><span>  cmp:cmp(&#39;value, &#39;id) =&gt;</span></span>
<span class="line"><span>  t(&#39;value, &#39;id);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let diff: </span></span>
<span class="line"><span>  t(&#39;value, &#39;id) =&gt;</span></span>
<span class="line"><span>  t(&#39;value, &#39;id) =&gt;</span></span>
<span class="line"><span>  cmp:cmp(&#39;value, &#39;id) =&gt;</span></span>
<span class="line"><span>  t(&#39;value, &#39;id);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let subset: t(&#39;value, &#39;id) =&gt; t(&#39;value, &#39;id) =&gt; cmp:cmp(&#39;value, &#39;id) =&gt; bool;</span></span></code></pre></div><p><code>subset s1 s2</code> tests whether the set <code>s1</code> is a subset of the set <code>s2</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let cmp: t(&#39;value, &#39;id) =&gt; t(&#39;value, &#39;id) =&gt; cmp:cmp(&#39;value, &#39;id) =&gt; int;</span></span></code></pre></div><p>Total ordering between sets. Can be used as the ordering function for doing sets of sets.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let eq: t(&#39;value, &#39;id) =&gt; t(&#39;value, &#39;id) =&gt; cmp:cmp(&#39;value, &#39;id) =&gt; bool;</span></span></code></pre></div><p><code>eq s1 s2</code> tests whether the sets <code>s1</code> and <code>s2</code> are equal, that is, contain equal elements.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let forEachU: t(&#39;value, &#39;id) =&gt; Js.Fn.arity1((&#39;value =&gt; unit)) =&gt; unit;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let forEach: t(&#39;value, &#39;id) =&gt; (&#39;value =&gt; unit) =&gt; unit;</span></span></code></pre></div><p><code>forEach s f</code> applies <code>f</code> in turn to all elements of <code>s</code>. In increasing order</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let reduceU: t(&#39;value, &#39;id) =&gt; &#39;a =&gt; Js.Fn.arity2((&#39;a =&gt; &#39;value =&gt; &#39;a)) =&gt; &#39;a;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let reduce: t(&#39;value, &#39;id) =&gt; &#39;a =&gt; (&#39;a =&gt; &#39;value =&gt; &#39;a) =&gt; &#39;a;</span></span></code></pre></div><p>Iterate in increasing order.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let everyU: t(&#39;value, &#39;id) =&gt; Js.Fn.arity1((&#39;value =&gt; bool)) =&gt; bool;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let every: t(&#39;value, &#39;id) =&gt; (&#39;value =&gt; bool) =&gt; bool;</span></span></code></pre></div><p><code>every p s</code> checks if all elements of the set satisfy the predicate <code>p</code>. Order unspecified.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let someU: t(&#39;value, &#39;id) =&gt; Js.Fn.arity1((&#39;value =&gt; bool)) =&gt; bool;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let some: t(&#39;value, &#39;id) =&gt; (&#39;value =&gt; bool) =&gt; bool;</span></span></code></pre></div><p><code>some p s</code> checks if at least one element of the set satisfies the predicate <code>p</code>. Oder unspecified.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let keepU: t(&#39;value, &#39;id) =&gt; Js.Fn.arity1((&#39;value =&gt; bool)) =&gt; t(&#39;value, &#39;id);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let keep: t(&#39;value, &#39;id) =&gt; (&#39;value =&gt; bool) =&gt; t(&#39;value, &#39;id);</span></span></code></pre></div><p><code>keep p s</code> returns the set of all elements in <code>s</code> that satisfy predicate <code>p</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let partitionU: </span></span>
<span class="line"><span>  t(&#39;value, &#39;id) =&gt;</span></span>
<span class="line"><span>  Js.Fn.arity1((&#39;value =&gt; bool)) =&gt;</span></span>
<span class="line"><span>  (t(&#39;value, &#39;id), t(&#39;value, &#39;id));</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let partition: </span></span>
<span class="line"><span>  t(&#39;value, &#39;id) =&gt;</span></span>
<span class="line"><span>  (&#39;value =&gt; bool) =&gt;</span></span>
<span class="line"><span>  (t(&#39;value, &#39;id), t(&#39;value, &#39;id));</span></span></code></pre></div><p><code>partition p s</code> returns a pair of sets <code>(s1, s2)</code>, where <code>s1</code> is the set of all the elements of <code>s</code> that satisfy the predicate <code>p</code>, and <code>s2</code> is the set of all the elements of <code>s</code> that do not satisfy <code>p</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let size: t(&#39;value, &#39;id) =&gt; int;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let toList: t(&#39;value, &#39;id) =&gt; list(&#39;value);</span></span></code></pre></div><p>In increasing order</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let toArray: t(&#39;value, &#39;id) =&gt; array(&#39;value);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let minimum: t(&#39;value, &#39;id) =&gt; option(&#39;value);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let minUndefined: t(&#39;value, &#39;id) =&gt; Js.undefined(&#39;value);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let maximum: t(&#39;value, &#39;id) =&gt; option(&#39;value);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let maxUndefined: t(&#39;value, &#39;id) =&gt; Js.undefined(&#39;value);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let get: t(&#39;value, &#39;id) =&gt; &#39;value =&gt; cmp:cmp(&#39;value, &#39;id) =&gt; option(&#39;value);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let getUndefined: </span></span>
<span class="line"><span>  t(&#39;value, &#39;id) =&gt;</span></span>
<span class="line"><span>  &#39;value =&gt;</span></span>
<span class="line"><span>  cmp:cmp(&#39;value, &#39;id) =&gt;</span></span>
<span class="line"><span>  Js.undefined(&#39;value);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let getExn: t(&#39;value, &#39;id) =&gt; &#39;value =&gt; cmp:cmp(&#39;value, &#39;id) =&gt; &#39;value;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let split: </span></span>
<span class="line"><span>  t(&#39;value, &#39;id) =&gt;</span></span>
<span class="line"><span>  &#39;value =&gt;</span></span>
<span class="line"><span>  cmp:cmp(&#39;value, &#39;id) =&gt;</span></span>
<span class="line"><span>  ((t(&#39;value, &#39;id), t(&#39;value, &#39;id)), bool);</span></span></code></pre></div><p><code>split x s</code> returns a triple <code>(l, present, r)</code>, where <code>l</code> is the set of elements of <code>s</code> that are strictly less than <code>x</code>; <code>r</code> is the set of elements of <code>s</code> that are strictly greater than <code>x</code>; <code>present</code> is <code>false</code> if <code>s</code> contains no element equal to <code>x</code>, or <code>true</code> if <code>s</code> contains an element equal to <code>x</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let checkInvariantInternal: t(_, _) =&gt; unit;</span></span></code></pre></div><p><strong>raise</strong> when invariant is not held</p>`,57),i=[p];function l(c,d,o,g,u,h){return a(),e("div",null,i)}const b=s(n,[["render",l]]);export{r as __pageData,b as default};
