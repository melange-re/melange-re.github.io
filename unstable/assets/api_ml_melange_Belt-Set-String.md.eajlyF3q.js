import{_ as e,c as s,o as a,V as t}from"./chunks/framework.BCxdY_ip.js";const r=JSON.parse('{"title":"Module Set.String","description":"","frontmatter":{},"headers":[],"relativePath":"api/ml/melange/Belt-Set-String.md","filePath":"api/ml/melange/Belt-Set-String.md"}'),i={name:"api/ml/melange/Belt-Set-String.md"},p=t('<h1 id="module-set-string" tabindex="-1">Module <code>Set.String</code> <a class="header-anchor" href="#module-set-string" aria-label="Permalink to &quot;Module `Set.String`&quot;">â€‹</a></h1><p>Specalized when value type is <code>string</code>, more efficient than the generic type, its compare behavior is fixed using the built-in comparison</p><p>This module is <a href="./Belt-Set.html"><code>Belt.Set</code></a> specialized with value type to be a primitive type. It is more efficient in general, the API is the same with <a href="./Belt-Set.html"><code>Belt.Set</code></a> except its value type is fixed, and identity is not needed(using the built-in one)</p><p><strong>See</strong> <a href="./Belt-Set.html"><code>Belt.Set</code></a></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>type value = string</span></span></code></pre></div><p>The type of the set elements.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>type t</span></span></code></pre></div><p>The type of sets.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val empty : t</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val fromArray : value array -&gt; t</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val fromSortedArrayUnsafe : value array -&gt; t</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val isEmpty : t -&gt; bool</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val has : t -&gt; value -&gt; bool</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val add : t -&gt; value -&gt; t</span></span></code></pre></div><p><code>add s x</code> If <code>x</code> was already in <code>s</code>, <code>s</code> is returned unchanged.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val mergeMany : t -&gt; value array -&gt; t</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val remove : t -&gt; value -&gt; t</span></span></code></pre></div><p><code>remove m x</code> If <code>x</code> was not in <code>m</code>, <code>m</code> is returned reference unchanged.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val removeMany : t -&gt; value array -&gt; t</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val union : t -&gt; t -&gt; t</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val intersect : t -&gt; t -&gt; t</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val diff : t -&gt; t -&gt; t</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val subset : t -&gt; t -&gt; bool</span></span></code></pre></div><p><code>subset s1 s2</code> tests whether the set <code>s1</code> is a subset of the set <code>s2</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val cmp : t -&gt; t -&gt; int</span></span></code></pre></div><p>Total ordering between sets. Can be used as the ordering function for doing sets of sets.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val eq : t -&gt; t -&gt; bool</span></span></code></pre></div><p><code>eq s1 s2</code> tests whether the sets <code>s1</code> and <code>s2</code> are equal, that is, contain equal elements.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val forEachU : t -&gt; (value -&gt; unit) Js.Fn.arity1 -&gt; unit</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val forEach : t -&gt; (value -&gt; unit) -&gt; unit</span></span></code></pre></div><p><code>forEach s f</code> applies <code>f</code> in turn to all elements of <code>s</code>. In increasing order</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val reduceU : t -&gt; &#39;a -&gt; (&#39;a -&gt; value -&gt; &#39;a) Js.Fn.arity2 -&gt; &#39;a</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val reduce : t -&gt; &#39;a -&gt; (&#39;a -&gt; value -&gt; &#39;a) -&gt; &#39;a</span></span></code></pre></div><p>Iterate in increasing order.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val everyU : t -&gt; (value -&gt; bool) Js.Fn.arity1 -&gt; bool</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val every : t -&gt; (value -&gt; bool) -&gt; bool</span></span></code></pre></div><p><code>every p s</code> checks if all elements of the set satisfy the predicate <code>p</code>. Order unspecified.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val someU : t -&gt; (value -&gt; bool) Js.Fn.arity1 -&gt; bool</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val some : t -&gt; (value -&gt; bool) -&gt; bool</span></span></code></pre></div><p><code>some p s</code> checks if at least one element of the set satisfies the predicate <code>p</code>. Oder unspecified.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val keepU : t -&gt; (value -&gt; bool) Js.Fn.arity1 -&gt; t</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val keep : t -&gt; (value -&gt; bool) -&gt; t</span></span></code></pre></div><p><code>keep p s</code> returns the set of all elements in <code>s</code> that satisfy predicate <code>p</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val partitionU : t -&gt; (value -&gt; bool) Js.Fn.arity1 -&gt; t * t</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val partition : t -&gt; (value -&gt; bool) -&gt; t * t</span></span></code></pre></div><p><code>partition p s</code> returns a pair of sets <code>(s1, s2)</code>, where <code>s1</code> is the set of all the elements of <code>s</code> that satisfy the predicate <code>p</code>, and <code>s2</code> is the set of all the elements of <code>s</code> that do not satisfy <code>p</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val size : t -&gt; int</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val toList : t -&gt; value list</span></span></code></pre></div><p>In increasing order</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val toArray : t -&gt; value array</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val minimum : t -&gt; value option</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val minUndefined : t -&gt; value Js.undefined</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val maximum : t -&gt; value option</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val maxUndefined : t -&gt; value Js.undefined</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val get : t -&gt; value -&gt; value option</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val getUndefined : t -&gt; value -&gt; value Js.undefined</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val getExn : t -&gt; value -&gt; value</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val split : t -&gt; value -&gt; (t * t) * bool</span></span></code></pre></div><p><code>split x s</code> returns a triple <code>(l, present, r)</code>, where <code>l</code> is the set of elements of <code>s</code> that are strictly less than <code>x</code>; <code>r</code> is the set of elements of <code>s</code> that are strictly greater than <code>x</code>; <code>present</code> is <code>false</code> if <code>s</code> contains no element equal to <code>x</code>, or <code>true</code> if <code>s</code> contains an element equal to <code>x</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>val checkInvariantInternal : t -&gt; unit</span></span></code></pre></div><p><strong>raise</strong> when invariant is not held</p>',61),n=[p];function l(o,c,d,g,h,v){return a(),s("div",null,n)}const b=e(i,[["render",l]]);export{r as __pageData,b as default};
